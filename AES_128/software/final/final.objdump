
final.elf:     file format elf32-littlenios2
final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000225c memsz 0x0000225c flags r-x
    LOAD off    0x0000327c vaddr 0x0000a27c paddr 0x0000a550 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00003824 vaddr 0x0000a824 paddr 0x0000a824 align 2**12
         filesz 0x00000000 memsz 0x0000009c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000021f4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0000a214  0000a214  00003214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  0000a27c  0000a550  0000327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000009c  0000a824  0000a824  00003824  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003550  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004a8  00000000  00000000  00003578  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000067a  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008dbe  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002112  00000000  00000000  0000ce58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005cd6  00000000  00000000  0000ef6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000810  00000000  00000000  00014c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d76  00000000  00000000  00015450  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001762  00000000  00000000  000161c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00017928  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00017938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000191ca  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  000191cd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000191d9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000191da  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000191db  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  000191e6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  000191f1  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  000191fc  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001a  00000000  00000000  00019202  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00029f11  00000000  00000000  0001921c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000a214 l    d  .rodata	00000000 .rodata
0000a27c l    d  .rwdata	00000000 .rwdata
0000a824 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 source.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000835c l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a27c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008bd0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008dd4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00008fd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a35c l     O .rwdata	0000002c jtag_uart_0
00009094 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00009424 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000094a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009580 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000096c4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00009814 l     F .text	000000f8 alt_file_locked
00009a98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00009ff0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000a1b0 l     F .text	00000040 alt_sim_halt
00008e40 g     F .text	0000006c alt_main
00008298 g     F .text	00000090 _puts_r
0000a550 g       *ABS*	00000000 __flash_rwdata_start
00008200 g     F .text	00000054 printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a824 g     O .bss	00000004 errno
0000a82c g     O .bss	00000004 alt_argv
00012530 g       *ABS*	00000000 _gp
0000a3b0 g     O .rwdata	00000180 alt_fd_list
00009b90 g     F .text	00000094 alt_find_dev
0000979c g     F .text	00000078 alt_io_redirect
0000a214 g       *ABS*	00000000 __DTOR_END__
00008328 g     F .text	00000014 puts
0000917c g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00008254 g     F .text	00000044 _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008d0c g     F .text	00000008 __udivsi3
0000a548 g     O .rwdata	00000004 alt_max_fd
0000a534 g     O .rwdata	00000004 _global_impure_ptr
0000a8c0 g       *ABS*	00000000 __bss_end
0000a388 g     O .rwdata	00000028 alt_dev_null
00009484 g     F .text	0000001c alt_dcache_flush_all
0000a550 g       *ABS*	00000000 __ram_rwdata_end
0000a540 g     O .rwdata	00000008 alt_dev_list
00008eac g     F .text	00000124 write
0000a27c g       *ABS*	00000000 __ram_rodata_end
00008d14 g     F .text	00000008 __umodsi3
0000a8c0 g       *ABS*	00000000 end
0000a210 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009280 g     F .text	000000a4 altera_avalon_jtag_uart_write
000083dc g     F .text	0000069c ___vfprintf_internal_r
00009ff4 g     F .text	000001bc __call_exitprocs
00008020 g     F .text	0000003c _start
00009064 g     F .text	00000030 alt_sys_init
00009e84 g     F .text	0000016c __register_exitproc
00008d1c g     F .text	00000038 __mulsi3
0000a27c g       *ABS*	00000000 __ram_rwdata_start
0000a214 g       *ABS*	00000000 __ram_rodata_start
000090cc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00009d44 g     F .text	000000d0 alt_get_fd
00009e48 g     F .text	0000003c memcmp
0000a8c0 g       *ABS*	00000000 __alt_stack_base
00009c24 g     F .text	00000120 alt_find_file
000094cc g     F .text	000000b4 alt_dev_llist_insert
00008a9c g     F .text	000000bc __sfvwrite_small_dev
0000a824 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000001a4 main
0000a830 g     O .bss	00000004 alt_envp
00009124 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000a834 g     O .bss	0000008c _atexit0
0000a54c g     O .rwdata	00000004 alt_errno
00008c4c g     F .text	00000060 __divsi3
0000a214 g       *ABS*	00000000 __CTOR_END__
0000a214 g       *ABS*	00000000 __flash_rodata_start
0000a214 g       *ABS*	00000000 __DTOR_LIST__
00009030 g     F .text	00000034 alt_irq_init
00009af8 g     F .text	00000078 alt_release_fd
00009e14 g     F .text	00000014 atexit
00008b58 g     F .text	00000078 _write_r
0000a530 g     O .rwdata	00000004 _impure_ptr
0000a828 g     O .bss	00000004 alt_argc
00009644 g     F .text	00000064 _do_dtors
0000a538 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a550 g       *ABS*	00000000 _edata
0000a8c0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009b70 g     F .text	00000020 altera_nios2_qsys_irq_init
00009e28 g     F .text	00000020 exit
00008cac g     F .text	00000060 __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
0000a1f0 g     F .text	00000020 _exit
0000833c g     F .text	00000020 strlen
0000990c g     F .text	0000018c open
000096a8 g     F .text	0000001c alt_icache_flush_all
00008a78 g     F .text	00000024 __vfprintf_internal
000095e0 g     F .text	00000064 _do_ctors
00009324 g     F .text	00000100 close
00008d54 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6894c14 	ori	gp,gp,9520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aa0914 	ori	r2,r2,43044

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ea3014 	ori	r3,r3,43200

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008d540 	call	8d54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008e400 	call	8e40 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include "system.h"
#include "io.h"
#include <stdio.h>

int main(void) {
    805c:	defff404 	addi	sp,sp,-48
    8060:	dfc00b15 	stw	ra,44(sp)
    8064:	df000a15 	stw	fp,40(sp)
    8068:	df000a04 	addi	fp,sp,40
    unsigned int ciphertext[6];

    // Cấu hình ngắt (đăng ký ngắt cho thiết bị của bạn)

    // Gửi dữ liệu vào các cổng
    IOWR(NEW_COMPONENT_0_BASE, 0, 0x2b7e1516);
    806c:	00c00074 	movhi	r3,1
    8070:	18c40004 	addi	r3,r3,4096
    8074:	008adfb4 	movhi	r2,11134
    8078:	10854584 	addi	r2,r2,5398
    807c:	18800035 	stwio	r2,0(r3)
    IOWR(NEW_COMPONENT_0_BASE, 1, 0x28aed2a6);
    8080:	00c00074 	movhi	r3,1
    8084:	18c40104 	addi	r3,r3,4100
    8088:	008a2bf4 	movhi	r2,10415
    808c:	10b4a984 	addi	r2,r2,-11610
    8090:	18800035 	stwio	r2,0(r3)
    IOWR(NEW_COMPONENT_0_BASE, 2, 0xabf71588);
    8094:	00c00074 	movhi	r3,1
    8098:	18c40204 	addi	r3,r3,4104
    809c:	00aafdf4 	movhi	r2,44023
    80a0:	10856204 	addi	r2,r2,5512
    80a4:	18800035 	stwio	r2,0(r3)
    IOWR(NEW_COMPONENT_0_BASE, 3, 0x09cf4f3c);
    80a8:	00c00074 	movhi	r3,1
    80ac:	18c40304 	addi	r3,r3,4108
    80b0:	008273f4 	movhi	r2,2511
    80b4:	1093cf04 	addi	r2,r2,20284
    80b8:	18800035 	stwio	r2,0(r3)

    IOWR(NEW_COMPONENT_0_BASE, 5, 1); // Generate Load_Key pulse
    80bc:	00c00074 	movhi	r3,1
    80c0:	18c40504 	addi	r3,r3,4116
    80c4:	00800044 	movi	r2,1
    80c8:	18800035 	stwio	r2,0(r3)

    IOWR(NEW_COMPONENT_0_BASE, 0, 0x3243f6a8);
    80cc:	00c00074 	movhi	r3,1
    80d0:	18c40004 	addi	r3,r3,4096
    80d4:	008c9134 	movhi	r2,12868
    80d8:	10bdaa04 	addi	r2,r2,-2392
    80dc:	18800035 	stwio	r2,0(r3)
    IOWR(NEW_COMPONENT_0_BASE, 1, 0x885a308d);
    80e0:	00c00074 	movhi	r3,1
    80e4:	18c40104 	addi	r3,r3,4100
    80e8:	00a216b4 	movhi	r2,34906
    80ec:	108c2344 	addi	r2,r2,12429
    80f0:	18800035 	stwio	r2,0(r3)
    IOWR(NEW_COMPONENT_0_BASE, 2, 0x313198a2);
    80f4:	00c00074 	movhi	r3,1
    80f8:	18c40204 	addi	r3,r3,4104
    80fc:	008c4cb4 	movhi	r2,12594
    8100:	10a62884 	addi	r2,r2,-26462
    8104:	18800035 	stwio	r2,0(r3)
    IOWR(NEW_COMPONENT_0_BASE, 3, 0xe0370734);
    8108:	00c00074 	movhi	r3,1
    810c:	18c40304 	addi	r3,r3,4108
    8110:	00b80df4 	movhi	r2,57399
    8114:	1081cd04 	addi	r2,r2,1844
    8118:	18800035 	stwio	r2,0(r3)

    IOWR(NEW_COMPONENT_0_BASE, 4, 1); // Generate Load_Data pulse
    811c:	00c00074 	movhi	r3,1
    8120:	18c40404 	addi	r3,r3,4112
    8124:	00800044 	movi	r2,1
    8128:	18800035 	stwio	r2,0(r3)

//   while((IORD(WRAPPER_AVALON_0_BASE, 4) == 0x00000000));
    int i;
    for(i = 0; i < 600; i++){
    812c:	e03ff915 	stw	zero,-28(fp)
    8130:	00000606 	br	814c <main+0xf0>
    	printf("abs\n");
    8134:	01000074 	movhi	r4,1
    8138:	21288504 	addi	r4,r4,-24044
    813c:	00083280 	call	8328 <puts>

    IOWR(NEW_COMPONENT_0_BASE, 4, 1); // Generate Load_Data pulse

//   while((IORD(WRAPPER_AVALON_0_BASE, 4) == 0x00000000));
    int i;
    for(i = 0; i < 600; i++){
    8140:	e0bff917 	ldw	r2,-28(fp)
    8144:	10800044 	addi	r2,r2,1
    8148:	e0bff915 	stw	r2,-28(fp)
    814c:	e0bff917 	ldw	r2,-28(fp)
    8150:	10809610 	cmplti	r2,r2,600
    8154:	103ff71e 	bne	r2,zero,8134 <main+0xd8>
    	printf("abs\n");
    }

    ciphertext[0] = IORD(NEW_COMPONENT_0_BASE, 0);
    8158:	00800074 	movhi	r2,1
    815c:	10840004 	addi	r2,r2,4096
    8160:	10800037 	ldwio	r2,0(r2)
    8164:	e0bffa15 	stw	r2,-24(fp)
    ciphertext[1] = IORD(NEW_COMPONENT_0_BASE, 1);
    8168:	00800074 	movhi	r2,1
    816c:	10840104 	addi	r2,r2,4100
    8170:	10800037 	ldwio	r2,0(r2)
    8174:	e0bffb15 	stw	r2,-20(fp)
    ciphertext[2] = IORD(NEW_COMPONENT_0_BASE, 2);
    8178:	00800074 	movhi	r2,1
    817c:	10840204 	addi	r2,r2,4104
    8180:	10800037 	ldwio	r2,0(r2)
    8184:	e0bffc15 	stw	r2,-16(fp)
    ciphertext[3] = IORD(NEW_COMPONENT_0_BASE, 3);
    8188:	00800074 	movhi	r2,1
    818c:	10840304 	addi	r2,r2,4108
    8190:	10800037 	ldwio	r2,0(r2)
    8194:	e0bffd15 	stw	r2,-12(fp)
    ciphertext[4] = IORD(NEW_COMPONENT_0_BASE, 4);
    8198:	00800074 	movhi	r2,1
    819c:	10840404 	addi	r2,r2,4112
    81a0:	10800037 	ldwio	r2,0(r2)
    81a4:	e0bffe15 	stw	r2,-8(fp)
    ciphertext[5] = IORD(NEW_COMPONENT_0_BASE, 5);
    81a8:	00800074 	movhi	r2,1
    81ac:	10840504 	addi	r2,r2,4116
    81b0:	10800037 	ldwio	r2,0(r2)
    81b4:	e0bfff15 	stw	r2,-4(fp)

    printf("CipherText: %08x %08x %08x %08x %08x %08x\n", ciphertext[0], ciphertext[1], ciphertext[2], ciphertext[3], ciphertext[4], ciphertext[5]);
    81b8:	e17ffa17 	ldw	r5,-24(fp)
    81bc:	e1bffb17 	ldw	r6,-20(fp)
    81c0:	e1fffc17 	ldw	r7,-16(fp)
    81c4:	e0bffd17 	ldw	r2,-12(fp)
    81c8:	e0fffe17 	ldw	r3,-8(fp)
    81cc:	e13fff17 	ldw	r4,-4(fp)
    81d0:	d8800015 	stw	r2,0(sp)
    81d4:	d8c00115 	stw	r3,4(sp)
    81d8:	d9000215 	stw	r4,8(sp)
    81dc:	01000074 	movhi	r4,1
    81e0:	21288604 	addi	r4,r4,-24040
    81e4:	00082000 	call	8200 <printf>

    return 0;
    81e8:	0005883a 	mov	r2,zero
}
    81ec:	e037883a 	mov	sp,fp
    81f0:	dfc00117 	ldw	ra,4(sp)
    81f4:	df000017 	ldw	fp,0(sp)
    81f8:	dec00204 	addi	sp,sp,8
    81fc:	f800283a 	ret

00008200 <printf>:
    8200:	defffb04 	addi	sp,sp,-20
    8204:	dfc00115 	stw	ra,4(sp)
    8208:	d9400215 	stw	r5,8(sp)
    820c:	d9800315 	stw	r6,12(sp)
    8210:	d9c00415 	stw	r7,16(sp)
    8214:	00800074 	movhi	r2,1
    8218:	10a94c04 	addi	r2,r2,-23248
    821c:	11400017 	ldw	r5,0(r2)
    8220:	d8800204 	addi	r2,sp,8
    8224:	d8800015 	stw	r2,0(sp)
    8228:	29c00217 	ldw	r7,8(r5)
    822c:	100d883a 	mov	r6,r2
    8230:	00800074 	movhi	r2,1
    8234:	10a2a704 	addi	r2,r2,-30052
    8238:	200b883a 	mov	r5,r4
    823c:	38800115 	stw	r2,4(r7)
    8240:	3809883a 	mov	r4,r7
    8244:	0008a780 	call	8a78 <__vfprintf_internal>
    8248:	dfc00117 	ldw	ra,4(sp)
    824c:	dec00504 	addi	sp,sp,20
    8250:	f800283a 	ret

00008254 <_printf_r>:
    8254:	defffc04 	addi	sp,sp,-16
    8258:	dfc00115 	stw	ra,4(sp)
    825c:	d9800215 	stw	r6,8(sp)
    8260:	d9c00315 	stw	r7,12(sp)
    8264:	22000217 	ldw	r8,8(r4)
    8268:	d8800204 	addi	r2,sp,8
    826c:	d8800015 	stw	r2,0(sp)
    8270:	100f883a 	mov	r7,r2
    8274:	00800074 	movhi	r2,1
    8278:	10a2a704 	addi	r2,r2,-30052
    827c:	280d883a 	mov	r6,r5
    8280:	40800115 	stw	r2,4(r8)
    8284:	400b883a 	mov	r5,r8
    8288:	00083dc0 	call	83dc <___vfprintf_internal_r>
    828c:	dfc00117 	ldw	ra,4(sp)
    8290:	dec00404 	addi	sp,sp,16
    8294:	f800283a 	ret

00008298 <_puts_r>:
    8298:	defffd04 	addi	sp,sp,-12
    829c:	dc000015 	stw	r16,0(sp)
    82a0:	2021883a 	mov	r16,r4
    82a4:	2809883a 	mov	r4,r5
    82a8:	dfc00215 	stw	ra,8(sp)
    82ac:	dc400115 	stw	r17,4(sp)
    82b0:	2823883a 	mov	r17,r5
    82b4:	000833c0 	call	833c <strlen>
    82b8:	80c00217 	ldw	r3,8(r16)
    82bc:	02000074 	movhi	r8,1
    82c0:	4222a704 	addi	r8,r8,-30052
    82c4:	880d883a 	mov	r6,r17
    82c8:	100f883a 	mov	r7,r2
    82cc:	8009883a 	mov	r4,r16
    82d0:	180b883a 	mov	r5,r3
    82d4:	1a000115 	stw	r8,4(r3)
    82d8:	403ee83a 	callr	r8
    82dc:	047fffc4 	movi	r17,-1
    82e0:	8009883a 	mov	r4,r16
    82e4:	01800074 	movhi	r6,1
    82e8:	31a89104 	addi	r6,r6,-23996
    82ec:	01c00044 	movi	r7,1
    82f0:	1440071e 	bne	r2,r17,8310 <_puts_r+0x78>
    82f4:	00ffffc4 	movi	r3,-1
    82f8:	1805883a 	mov	r2,r3
    82fc:	dfc00217 	ldw	ra,8(sp)
    8300:	dc400117 	ldw	r17,4(sp)
    8304:	dc000017 	ldw	r16,0(sp)
    8308:	dec00304 	addi	sp,sp,12
    830c:	f800283a 	ret
    8310:	81400217 	ldw	r5,8(r16)
    8314:	28c00117 	ldw	r3,4(r5)
    8318:	183ee83a 	callr	r3
    831c:	0007883a 	mov	r3,zero
    8320:	147ff51e 	bne	r2,r17,82f8 <_puts_r+0x60>
    8324:	003ff306 	br	82f4 <_puts_r+0x5c>

00008328 <puts>:
    8328:	00800074 	movhi	r2,1
    832c:	10a94c04 	addi	r2,r2,-23248
    8330:	200b883a 	mov	r5,r4
    8334:	11000017 	ldw	r4,0(r2)
    8338:	00082981 	jmpi	8298 <_puts_r>

0000833c <strlen>:
    833c:	20800007 	ldb	r2,0(r4)
    8340:	10000526 	beq	r2,zero,8358 <strlen+0x1c>
    8344:	2007883a 	mov	r3,r4
    8348:	18c00044 	addi	r3,r3,1
    834c:	18800007 	ldb	r2,0(r3)
    8350:	103ffd1e 	bne	r2,zero,8348 <strlen+0xc>
    8354:	1905c83a 	sub	r2,r3,r4
    8358:	f800283a 	ret

0000835c <print_repeat>:
    835c:	defffb04 	addi	sp,sp,-20
    8360:	dc800315 	stw	r18,12(sp)
    8364:	dc400215 	stw	r17,8(sp)
    8368:	dc000115 	stw	r16,4(sp)
    836c:	dfc00415 	stw	ra,16(sp)
    8370:	2025883a 	mov	r18,r4
    8374:	2823883a 	mov	r17,r5
    8378:	3821883a 	mov	r16,r7
    837c:	d9800005 	stb	r6,0(sp)
    8380:	9009883a 	mov	r4,r18
    8384:	880b883a 	mov	r5,r17
    8388:	d80d883a 	mov	r6,sp
    838c:	01c00044 	movi	r7,1
    8390:	04000b0e 	bge	zero,r16,83c0 <print_repeat+0x64>
    8394:	88c00117 	ldw	r3,4(r17)
    8398:	843fffc4 	addi	r16,r16,-1
    839c:	183ee83a 	callr	r3
    83a0:	103ff726 	beq	r2,zero,8380 <print_repeat+0x24>
    83a4:	00bfffc4 	movi	r2,-1
    83a8:	dfc00417 	ldw	ra,16(sp)
    83ac:	dc800317 	ldw	r18,12(sp)
    83b0:	dc400217 	ldw	r17,8(sp)
    83b4:	dc000117 	ldw	r16,4(sp)
    83b8:	dec00504 	addi	sp,sp,20
    83bc:	f800283a 	ret
    83c0:	0005883a 	mov	r2,zero
    83c4:	dfc00417 	ldw	ra,16(sp)
    83c8:	dc800317 	ldw	r18,12(sp)
    83cc:	dc400217 	ldw	r17,8(sp)
    83d0:	dc000117 	ldw	r16,4(sp)
    83d4:	dec00504 	addi	sp,sp,20
    83d8:	f800283a 	ret

000083dc <___vfprintf_internal_r>:
    83dc:	deffe304 	addi	sp,sp,-116
    83e0:	df001b15 	stw	fp,108(sp)
    83e4:	ddc01a15 	stw	r23,104(sp)
    83e8:	dd001715 	stw	r20,92(sp)
    83ec:	dc801515 	stw	r18,84(sp)
    83f0:	dc001315 	stw	r16,76(sp)
    83f4:	dfc01c15 	stw	ra,112(sp)
    83f8:	dd801915 	stw	r22,100(sp)
    83fc:	dd401815 	stw	r21,96(sp)
    8400:	dcc01615 	stw	r19,88(sp)
    8404:	dc401415 	stw	r17,80(sp)
    8408:	d9001015 	stw	r4,64(sp)
    840c:	2829883a 	mov	r20,r5
    8410:	d9c01115 	stw	r7,68(sp)
    8414:	3025883a 	mov	r18,r6
    8418:	0021883a 	mov	r16,zero
    841c:	d8000f15 	stw	zero,60(sp)
    8420:	d8000e15 	stw	zero,56(sp)
    8424:	0039883a 	mov	fp,zero
    8428:	d8000915 	stw	zero,36(sp)
    842c:	d8000d15 	stw	zero,52(sp)
    8430:	d8000c15 	stw	zero,48(sp)
    8434:	d8000b15 	stw	zero,44(sp)
    8438:	002f883a 	mov	r23,zero
    843c:	91400003 	ldbu	r5,0(r18)
    8440:	01c00044 	movi	r7,1
    8444:	94800044 	addi	r18,r18,1
    8448:	29003fcc 	andi	r4,r5,255
    844c:	2100201c 	xori	r4,r4,128
    8450:	213fe004 	addi	r4,r4,-128
    8454:	20001526 	beq	r4,zero,84ac <___vfprintf_internal_r+0xd0>
    8458:	81c03526 	beq	r16,r7,8530 <___vfprintf_internal_r+0x154>
    845c:	3c002016 	blt	r7,r16,84e0 <___vfprintf_internal_r+0x104>
    8460:	803ff61e 	bne	r16,zero,843c <___vfprintf_internal_r+0x60>
    8464:	00800944 	movi	r2,37
    8468:	2081501e 	bne	r4,r2,89ac <___vfprintf_internal_r+0x5d0>
    846c:	073fffc4 	movi	fp,-1
    8470:	00800284 	movi	r2,10
    8474:	d9c00c15 	stw	r7,48(sp)
    8478:	d8000f15 	stw	zero,60(sp)
    847c:	d8000e15 	stw	zero,56(sp)
    8480:	df000915 	stw	fp,36(sp)
    8484:	d8800d15 	stw	r2,52(sp)
    8488:	d8000b15 	stw	zero,44(sp)
    848c:	91400003 	ldbu	r5,0(r18)
    8490:	3821883a 	mov	r16,r7
    8494:	94800044 	addi	r18,r18,1
    8498:	29003fcc 	andi	r4,r5,255
    849c:	2100201c 	xori	r4,r4,128
    84a0:	213fe004 	addi	r4,r4,-128
    84a4:	01c00044 	movi	r7,1
    84a8:	203feb1e 	bne	r4,zero,8458 <___vfprintf_internal_r+0x7c>
    84ac:	b805883a 	mov	r2,r23
    84b0:	dfc01c17 	ldw	ra,112(sp)
    84b4:	df001b17 	ldw	fp,108(sp)
    84b8:	ddc01a17 	ldw	r23,104(sp)
    84bc:	dd801917 	ldw	r22,100(sp)
    84c0:	dd401817 	ldw	r21,96(sp)
    84c4:	dd001717 	ldw	r20,92(sp)
    84c8:	dcc01617 	ldw	r19,88(sp)
    84cc:	dc801517 	ldw	r18,84(sp)
    84d0:	dc401417 	ldw	r17,80(sp)
    84d4:	dc001317 	ldw	r16,76(sp)
    84d8:	dec01d04 	addi	sp,sp,116
    84dc:	f800283a 	ret
    84e0:	00800084 	movi	r2,2
    84e4:	80801726 	beq	r16,r2,8544 <___vfprintf_internal_r+0x168>
    84e8:	008000c4 	movi	r2,3
    84ec:	80bfd31e 	bne	r16,r2,843c <___vfprintf_internal_r+0x60>
    84f0:	2c7ff404 	addi	r17,r5,-48
    84f4:	88c03fcc 	andi	r3,r17,255
    84f8:	00800244 	movi	r2,9
    84fc:	10c02136 	bltu	r2,r3,8584 <___vfprintf_internal_r+0x1a8>
    8500:	d8c00917 	ldw	r3,36(sp)
    8504:	18012716 	blt	r3,zero,89a4 <___vfprintf_internal_r+0x5c8>
    8508:	d9000917 	ldw	r4,36(sp)
    850c:	01400284 	movi	r5,10
    8510:	0008d1c0 	call	8d1c <__mulsi3>
    8514:	1007883a 	mov	r3,r2
    8518:	88803fcc 	andi	r2,r17,255
    851c:	1080201c 	xori	r2,r2,128
    8520:	10bfe004 	addi	r2,r2,-128
    8524:	1887883a 	add	r3,r3,r2
    8528:	d8c00915 	stw	r3,36(sp)
    852c:	003fc306 	br	843c <___vfprintf_internal_r+0x60>
    8530:	00800c04 	movi	r2,48
    8534:	2080b326 	beq	r4,r2,8804 <___vfprintf_internal_r+0x428>
    8538:	00800944 	movi	r2,37
    853c:	20812726 	beq	r4,r2,89dc <___vfprintf_internal_r+0x600>
    8540:	04000084 	movi	r16,2
    8544:	2c7ff404 	addi	r17,r5,-48
    8548:	88c03fcc 	andi	r3,r17,255
    854c:	00800244 	movi	r2,9
    8550:	10c00a36 	bltu	r2,r3,857c <___vfprintf_internal_r+0x1a0>
    8554:	e000b416 	blt	fp,zero,8828 <___vfprintf_internal_r+0x44c>
    8558:	e009883a 	mov	r4,fp
    855c:	01400284 	movi	r5,10
    8560:	0008d1c0 	call	8d1c <__mulsi3>
    8564:	1007883a 	mov	r3,r2
    8568:	88803fcc 	andi	r2,r17,255
    856c:	1080201c 	xori	r2,r2,128
    8570:	10bfe004 	addi	r2,r2,-128
    8574:	18b9883a 	add	fp,r3,r2
    8578:	003fb006 	br	843c <___vfprintf_internal_r+0x60>
    857c:	00800b84 	movi	r2,46
    8580:	2080a326 	beq	r4,r2,8810 <___vfprintf_internal_r+0x434>
    8584:	00801b04 	movi	r2,108
    8588:	2080a326 	beq	r4,r2,8818 <___vfprintf_internal_r+0x43c>
    858c:	d8c00917 	ldw	r3,36(sp)
    8590:	1800a716 	blt	r3,zero,8830 <___vfprintf_internal_r+0x454>
    8594:	d8000f15 	stw	zero,60(sp)
    8598:	28bfea04 	addi	r2,r5,-88
    859c:	10803fcc 	andi	r2,r2,255
    85a0:	00c00804 	movi	r3,32
    85a4:	18802836 	bltu	r3,r2,8648 <___vfprintf_internal_r+0x26c>
    85a8:	1085883a 	add	r2,r2,r2
    85ac:	1085883a 	add	r2,r2,r2
    85b0:	00c00074 	movhi	r3,1
    85b4:	18e17104 	addi	r3,r3,-31292
    85b8:	10c5883a 	add	r2,r2,r3
    85bc:	11000017 	ldw	r4,0(r2)
    85c0:	2000683a 	jmp	r4
    85c4:	00008650 	cmplti	zero,zero,537
    85c8:	00008648 	cmpgei	zero,zero,537
    85cc:	00008648 	cmpgei	zero,zero,537
    85d0:	00008648 	cmpgei	zero,zero,537
    85d4:	00008648 	cmpgei	zero,zero,537
    85d8:	00008648 	cmpgei	zero,zero,537
    85dc:	00008648 	cmpgei	zero,zero,537
    85e0:	00008648 	cmpgei	zero,zero,537
    85e4:	00008648 	cmpgei	zero,zero,537
    85e8:	00008648 	cmpgei	zero,zero,537
    85ec:	00008648 	cmpgei	zero,zero,537
    85f0:	0000887c 	xorhi	zero,zero,545
    85f4:	00008664 	muli	zero,zero,537
    85f8:	00008648 	cmpgei	zero,zero,537
    85fc:	00008648 	cmpgei	zero,zero,537
    8600:	00008648 	cmpgei	zero,zero,537
    8604:	00008648 	cmpgei	zero,zero,537
    8608:	00008664 	muli	zero,zero,537
    860c:	00008648 	cmpgei	zero,zero,537
    8610:	00008648 	cmpgei	zero,zero,537
    8614:	00008648 	cmpgei	zero,zero,537
    8618:	00008648 	cmpgei	zero,zero,537
    861c:	00008648 	cmpgei	zero,zero,537
    8620:	000088e4 	muli	zero,zero,547
    8624:	00008648 	cmpgei	zero,zero,537
    8628:	00008648 	cmpgei	zero,zero,537
    862c:	00008648 	cmpgei	zero,zero,537
    8630:	000088f4 	movhi	zero,547
    8634:	00008648 	cmpgei	zero,zero,537
    8638:	000087c8 	cmpgei	zero,zero,543
    863c:	00008648 	cmpgei	zero,zero,537
    8640:	00008648 	cmpgei	zero,zero,537
    8644:	000087c0 	call	87c <__alt_mem_onchip_memory2_0-0x7784>
    8648:	0021883a 	mov	r16,zero
    864c:	003f7b06 	br	843c <___vfprintf_internal_r+0x60>
    8650:	00c00404 	movi	r3,16
    8654:	00800044 	movi	r2,1
    8658:	d8c00d15 	stw	r3,52(sp)
    865c:	d8000c15 	stw	zero,48(sp)
    8660:	d8800b15 	stw	r2,44(sp)
    8664:	d8c00e17 	ldw	r3,56(sp)
    8668:	1805003a 	cmpeq	r2,r3,zero
    866c:	10005a1e 	bne	r2,zero,87d8 <___vfprintf_internal_r+0x3fc>
    8670:	d8800c17 	ldw	r2,48(sp)
    8674:	1000781e 	bne	r2,zero,8858 <___vfprintf_internal_r+0x47c>
    8678:	d8801117 	ldw	r2,68(sp)
    867c:	d8000a15 	stw	zero,40(sp)
    8680:	14400017 	ldw	r17,0(r2)
    8684:	11c00104 	addi	r7,r2,4
    8688:	d9c01115 	stw	r7,68(sp)
    868c:	88005a26 	beq	r17,zero,87f8 <___vfprintf_internal_r+0x41c>
    8690:	d8c00b17 	ldw	r3,44(sp)
    8694:	dcc00044 	addi	r19,sp,1
    8698:	05800244 	movi	r22,9
    869c:	182b003a 	cmpeq	r21,r3,zero
    86a0:	dcc01215 	stw	r19,72(sp)
    86a4:	00000506 	br	86bc <___vfprintf_internal_r+0x2e0>
    86a8:	21000c04 	addi	r4,r4,48
    86ac:	99000005 	stb	r4,0(r19)
    86b0:	9cc00044 	addi	r19,r19,1
    86b4:	80000f26 	beq	r16,zero,86f4 <___vfprintf_internal_r+0x318>
    86b8:	8023883a 	mov	r17,r16
    86bc:	d9400d17 	ldw	r5,52(sp)
    86c0:	8809883a 	mov	r4,r17
    86c4:	0008d0c0 	call	8d0c <__udivsi3>
    86c8:	d9000d17 	ldw	r4,52(sp)
    86cc:	100b883a 	mov	r5,r2
    86d0:	1021883a 	mov	r16,r2
    86d4:	0008d1c0 	call	8d1c <__mulsi3>
    86d8:	8889c83a 	sub	r4,r17,r2
    86dc:	b13ff20e 	bge	r22,r4,86a8 <___vfprintf_internal_r+0x2cc>
    86e0:	a8009f1e 	bne	r21,zero,8960 <___vfprintf_internal_r+0x584>
    86e4:	21000dc4 	addi	r4,r4,55
    86e8:	99000005 	stb	r4,0(r19)
    86ec:	9cc00044 	addi	r19,r19,1
    86f0:	803ff11e 	bne	r16,zero,86b8 <___vfprintf_internal_r+0x2dc>
    86f4:	d8801217 	ldw	r2,72(sp)
    86f8:	98a3c83a 	sub	r17,r19,r2
    86fc:	d8c00917 	ldw	r3,36(sp)
    8700:	1c4bc83a 	sub	r5,r3,r17
    8704:	0140130e 	bge	zero,r5,8754 <___vfprintf_internal_r+0x378>
    8708:	d8c00044 	addi	r3,sp,1
    870c:	18800804 	addi	r2,r3,32
    8710:	9880102e 	bgeu	r19,r2,8754 <___vfprintf_internal_r+0x378>
    8714:	00800c04 	movi	r2,48
    8718:	28ffffc4 	addi	r3,r5,-1
    871c:	98800005 	stb	r2,0(r19)
    8720:	99000044 	addi	r4,r19,1
    8724:	00c0080e 	bge	zero,r3,8748 <___vfprintf_internal_r+0x36c>
    8728:	d8c00044 	addi	r3,sp,1
    872c:	18800804 	addi	r2,r3,32
    8730:	2080052e 	bgeu	r4,r2,8748 <___vfprintf_internal_r+0x36c>
    8734:	00800c04 	movi	r2,48
    8738:	20800005 	stb	r2,0(r4)
    873c:	21000044 	addi	r4,r4,1
    8740:	9945883a 	add	r2,r19,r5
    8744:	20bff81e 	bne	r4,r2,8728 <___vfprintf_internal_r+0x34c>
    8748:	d8801217 	ldw	r2,72(sp)
    874c:	2027883a 	mov	r19,r4
    8750:	20a3c83a 	sub	r17,r4,r2
    8754:	d8c00a17 	ldw	r3,40(sp)
    8758:	1c45883a 	add	r2,r3,r17
    875c:	e0a1c83a 	sub	r16,fp,r2
    8760:	d8800f17 	ldw	r2,60(sp)
    8764:	10008026 	beq	r2,zero,8968 <___vfprintf_internal_r+0x58c>
    8768:	1805003a 	cmpeq	r2,r3,zero
    876c:	1000ae26 	beq	r2,zero,8a28 <___vfprintf_internal_r+0x64c>
    8770:	0400a516 	blt	zero,r16,8a08 <___vfprintf_internal_r+0x62c>
    8774:	b805883a 	mov	r2,r23
    8778:	0440950e 	bge	zero,r17,89d0 <___vfprintf_internal_r+0x5f4>
    877c:	102f883a 	mov	r23,r2
    8780:	1461883a 	add	r16,r2,r17
    8784:	00000206 	br	8790 <___vfprintf_internal_r+0x3b4>
    8788:	bdc00044 	addi	r23,r23,1
    878c:	85ffae26 	beq	r16,r23,8648 <___vfprintf_internal_r+0x26c>
    8790:	9cffffc4 	addi	r19,r19,-1
    8794:	98800003 	ldbu	r2,0(r19)
    8798:	a0c00117 	ldw	r3,4(r20)
    879c:	d9001017 	ldw	r4,64(sp)
    87a0:	d8800005 	stb	r2,0(sp)
    87a4:	a00b883a 	mov	r5,r20
    87a8:	d80d883a 	mov	r6,sp
    87ac:	01c00044 	movi	r7,1
    87b0:	183ee83a 	callr	r3
    87b4:	103ff426 	beq	r2,zero,8788 <___vfprintf_internal_r+0x3ac>
    87b8:	05ffffc4 	movi	r23,-1
    87bc:	003f3b06 	br	84ac <___vfprintf_internal_r+0xd0>
    87c0:	00c00404 	movi	r3,16
    87c4:	d8c00d15 	stw	r3,52(sp)
    87c8:	d8000c15 	stw	zero,48(sp)
    87cc:	d8c00e17 	ldw	r3,56(sp)
    87d0:	1805003a 	cmpeq	r2,r3,zero
    87d4:	103fa626 	beq	r2,zero,8670 <___vfprintf_internal_r+0x294>
    87d8:	d8c00c17 	ldw	r3,48(sp)
    87dc:	1800171e 	bne	r3,zero,883c <___vfprintf_internal_r+0x460>
    87e0:	d8c01117 	ldw	r3,68(sp)
    87e4:	d8000a15 	stw	zero,40(sp)
    87e8:	1c400017 	ldw	r17,0(r3)
    87ec:	19c00104 	addi	r7,r3,4
    87f0:	d9c01115 	stw	r7,68(sp)
    87f4:	883fa61e 	bne	r17,zero,8690 <___vfprintf_internal_r+0x2b4>
    87f8:	dcc00044 	addi	r19,sp,1
    87fc:	dcc01215 	stw	r19,72(sp)
    8800:	003fbe06 	br	86fc <___vfprintf_internal_r+0x320>
    8804:	04000084 	movi	r16,2
    8808:	d9c00f15 	stw	r7,60(sp)
    880c:	003f0b06 	br	843c <___vfprintf_internal_r+0x60>
    8810:	040000c4 	movi	r16,3
    8814:	003f0906 	br	843c <___vfprintf_internal_r+0x60>
    8818:	00800044 	movi	r2,1
    881c:	040000c4 	movi	r16,3
    8820:	d8800e15 	stw	r2,56(sp)
    8824:	003f0506 	br	843c <___vfprintf_internal_r+0x60>
    8828:	0007883a 	mov	r3,zero
    882c:	003f4e06 	br	8568 <___vfprintf_internal_r+0x18c>
    8830:	00800044 	movi	r2,1
    8834:	d8800915 	stw	r2,36(sp)
    8838:	003f5706 	br	8598 <___vfprintf_internal_r+0x1bc>
    883c:	d8801117 	ldw	r2,68(sp)
    8840:	14400017 	ldw	r17,0(r2)
    8844:	10800104 	addi	r2,r2,4
    8848:	d8801115 	stw	r2,68(sp)
    884c:	88000716 	blt	r17,zero,886c <___vfprintf_internal_r+0x490>
    8850:	d8000a15 	stw	zero,40(sp)
    8854:	003f8d06 	br	868c <___vfprintf_internal_r+0x2b0>
    8858:	d8c01117 	ldw	r3,68(sp)
    885c:	1c400017 	ldw	r17,0(r3)
    8860:	18c00104 	addi	r3,r3,4
    8864:	d8c01115 	stw	r3,68(sp)
    8868:	883ff90e 	bge	r17,zero,8850 <___vfprintf_internal_r+0x474>
    886c:	00800044 	movi	r2,1
    8870:	0463c83a 	sub	r17,zero,r17
    8874:	d8800a15 	stw	r2,40(sp)
    8878:	003f8406 	br	868c <___vfprintf_internal_r+0x2b0>
    887c:	04000044 	movi	r16,1
    8880:	8700080e 	bge	r16,fp,88a4 <___vfprintf_internal_r+0x4c8>
    8884:	d9001017 	ldw	r4,64(sp)
    8888:	a00b883a 	mov	r5,r20
    888c:	01800804 	movi	r6,32
    8890:	e1ffffc4 	addi	r7,fp,-1
    8894:	000835c0 	call	835c <print_repeat>
    8898:	103fc71e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    889c:	e5c5883a 	add	r2,fp,r23
    88a0:	15ffffc4 	addi	r23,r2,-1
    88a4:	d8c01117 	ldw	r3,68(sp)
    88a8:	d9001017 	ldw	r4,64(sp)
    88ac:	800f883a 	mov	r7,r16
    88b0:	18800017 	ldw	r2,0(r3)
    88b4:	a0c00117 	ldw	r3,4(r20)
    88b8:	a00b883a 	mov	r5,r20
    88bc:	d8800005 	stb	r2,0(sp)
    88c0:	d80d883a 	mov	r6,sp
    88c4:	183ee83a 	callr	r3
    88c8:	103fbb1e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    88cc:	d8801117 	ldw	r2,68(sp)
    88d0:	bdc00044 	addi	r23,r23,1
    88d4:	0021883a 	mov	r16,zero
    88d8:	10800104 	addi	r2,r2,4
    88dc:	d8801115 	stw	r2,68(sp)
    88e0:	003ed606 	br	843c <___vfprintf_internal_r+0x60>
    88e4:	00800204 	movi	r2,8
    88e8:	d8800d15 	stw	r2,52(sp)
    88ec:	d8000c15 	stw	zero,48(sp)
    88f0:	003fb606 	br	87cc <___vfprintf_internal_r+0x3f0>
    88f4:	d8c01117 	ldw	r3,68(sp)
    88f8:	1cc00017 	ldw	r19,0(r3)
    88fc:	9809883a 	mov	r4,r19
    8900:	000833c0 	call	833c <strlen>
    8904:	e0a1c83a 	sub	r16,fp,r2
    8908:	1023883a 	mov	r17,r2
    890c:	0400070e 	bge	zero,r16,892c <___vfprintf_internal_r+0x550>
    8910:	d9001017 	ldw	r4,64(sp)
    8914:	a00b883a 	mov	r5,r20
    8918:	01800804 	movi	r6,32
    891c:	800f883a 	mov	r7,r16
    8920:	000835c0 	call	835c <print_repeat>
    8924:	103fa41e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    8928:	bc2f883a 	add	r23,r23,r16
    892c:	a0c00117 	ldw	r3,4(r20)
    8930:	d9001017 	ldw	r4,64(sp)
    8934:	980d883a 	mov	r6,r19
    8938:	a00b883a 	mov	r5,r20
    893c:	880f883a 	mov	r7,r17
    8940:	183ee83a 	callr	r3
    8944:	103f9c1e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    8948:	d8801117 	ldw	r2,68(sp)
    894c:	bc6f883a 	add	r23,r23,r17
    8950:	0021883a 	mov	r16,zero
    8954:	10800104 	addi	r2,r2,4
    8958:	d8801115 	stw	r2,68(sp)
    895c:	003eb706 	br	843c <___vfprintf_internal_r+0x60>
    8960:	210015c4 	addi	r4,r4,87
    8964:	003f5106 	br	86ac <___vfprintf_internal_r+0x2d0>
    8968:	04003b16 	blt	zero,r16,8a58 <___vfprintf_internal_r+0x67c>
    896c:	d8c00a17 	ldw	r3,40(sp)
    8970:	1805003a 	cmpeq	r2,r3,zero
    8974:	103f7f1e 	bne	r2,zero,8774 <___vfprintf_internal_r+0x398>
    8978:	a0c00117 	ldw	r3,4(r20)
    897c:	d9001017 	ldw	r4,64(sp)
    8980:	00800b44 	movi	r2,45
    8984:	d8800005 	stb	r2,0(sp)
    8988:	a00b883a 	mov	r5,r20
    898c:	d80d883a 	mov	r6,sp
    8990:	01c00044 	movi	r7,1
    8994:	183ee83a 	callr	r3
    8998:	103f871e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    899c:	b8800044 	addi	r2,r23,1
    89a0:	003f7506 	br	8778 <___vfprintf_internal_r+0x39c>
    89a4:	0007883a 	mov	r3,zero
    89a8:	003edb06 	br	8518 <___vfprintf_internal_r+0x13c>
    89ac:	a0c00117 	ldw	r3,4(r20)
    89b0:	d9001017 	ldw	r4,64(sp)
    89b4:	d9400005 	stb	r5,0(sp)
    89b8:	d80d883a 	mov	r6,sp
    89bc:	a00b883a 	mov	r5,r20
    89c0:	183ee83a 	callr	r3
    89c4:	103f7c1e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    89c8:	bdc00044 	addi	r23,r23,1
    89cc:	003e9b06 	br	843c <___vfprintf_internal_r+0x60>
    89d0:	102f883a 	mov	r23,r2
    89d4:	0021883a 	mov	r16,zero
    89d8:	003e9806 	br	843c <___vfprintf_internal_r+0x60>
    89dc:	a0c00117 	ldw	r3,4(r20)
    89e0:	d9000005 	stb	r4,0(sp)
    89e4:	d9001017 	ldw	r4,64(sp)
    89e8:	a00b883a 	mov	r5,r20
    89ec:	d80d883a 	mov	r6,sp
    89f0:	800f883a 	mov	r7,r16
    89f4:	183ee83a 	callr	r3
    89f8:	103f6f1e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    89fc:	bc2f883a 	add	r23,r23,r16
    8a00:	0021883a 	mov	r16,zero
    8a04:	003e8d06 	br	843c <___vfprintf_internal_r+0x60>
    8a08:	d9001017 	ldw	r4,64(sp)
    8a0c:	a00b883a 	mov	r5,r20
    8a10:	01800c04 	movi	r6,48
    8a14:	800f883a 	mov	r7,r16
    8a18:	000835c0 	call	835c <print_repeat>
    8a1c:	103f661e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    8a20:	bc05883a 	add	r2,r23,r16
    8a24:	003f5406 	br	8778 <___vfprintf_internal_r+0x39c>
    8a28:	a0c00117 	ldw	r3,4(r20)
    8a2c:	d9001017 	ldw	r4,64(sp)
    8a30:	00800b44 	movi	r2,45
    8a34:	d8800005 	stb	r2,0(sp)
    8a38:	a00b883a 	mov	r5,r20
    8a3c:	d80d883a 	mov	r6,sp
    8a40:	01c00044 	movi	r7,1
    8a44:	183ee83a 	callr	r3
    8a48:	103f5b1e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    8a4c:	bdc00044 	addi	r23,r23,1
    8a50:	043f480e 	bge	zero,r16,8774 <___vfprintf_internal_r+0x398>
    8a54:	003fec06 	br	8a08 <___vfprintf_internal_r+0x62c>
    8a58:	d9001017 	ldw	r4,64(sp)
    8a5c:	a00b883a 	mov	r5,r20
    8a60:	01800804 	movi	r6,32
    8a64:	800f883a 	mov	r7,r16
    8a68:	000835c0 	call	835c <print_repeat>
    8a6c:	103f521e 	bne	r2,zero,87b8 <___vfprintf_internal_r+0x3dc>
    8a70:	bc2f883a 	add	r23,r23,r16
    8a74:	003fbd06 	br	896c <___vfprintf_internal_r+0x590>

00008a78 <__vfprintf_internal>:
    8a78:	00800074 	movhi	r2,1
    8a7c:	10a94c04 	addi	r2,r2,-23248
    8a80:	2013883a 	mov	r9,r4
    8a84:	11000017 	ldw	r4,0(r2)
    8a88:	2805883a 	mov	r2,r5
    8a8c:	300f883a 	mov	r7,r6
    8a90:	480b883a 	mov	r5,r9
    8a94:	100d883a 	mov	r6,r2
    8a98:	00083dc1 	jmpi	83dc <___vfprintf_internal_r>

00008a9c <__sfvwrite_small_dev>:
    8a9c:	2880000b 	ldhu	r2,0(r5)
    8aa0:	defffa04 	addi	sp,sp,-24
    8aa4:	dcc00315 	stw	r19,12(sp)
    8aa8:	1080020c 	andi	r2,r2,8
    8aac:	dc800215 	stw	r18,8(sp)
    8ab0:	dc400115 	stw	r17,4(sp)
    8ab4:	dfc00515 	stw	ra,20(sp)
    8ab8:	dd000415 	stw	r20,16(sp)
    8abc:	dc000015 	stw	r16,0(sp)
    8ac0:	2825883a 	mov	r18,r5
    8ac4:	2027883a 	mov	r19,r4
    8ac8:	3023883a 	mov	r17,r6
    8acc:	10002026 	beq	r2,zero,8b50 <__sfvwrite_small_dev+0xb4>
    8ad0:	2940008f 	ldh	r5,2(r5)
    8ad4:	28000f16 	blt	r5,zero,8b14 <__sfvwrite_small_dev+0x78>
    8ad8:	01c01b0e 	bge	zero,r7,8b48 <__sfvwrite_small_dev+0xac>
    8adc:	3821883a 	mov	r16,r7
    8ae0:	05010004 	movi	r20,1024
    8ae4:	00000206 	br	8af0 <__sfvwrite_small_dev+0x54>
    8ae8:	0400170e 	bge	zero,r16,8b48 <__sfvwrite_small_dev+0xac>
    8aec:	9140008f 	ldh	r5,2(r18)
    8af0:	880d883a 	mov	r6,r17
    8af4:	9809883a 	mov	r4,r19
    8af8:	800f883a 	mov	r7,r16
    8afc:	a400010e 	bge	r20,r16,8b04 <__sfvwrite_small_dev+0x68>
    8b00:	01c10004 	movi	r7,1024
    8b04:	0008b580 	call	8b58 <_write_r>
    8b08:	88a3883a 	add	r17,r17,r2
    8b0c:	80a1c83a 	sub	r16,r16,r2
    8b10:	00bff516 	blt	zero,r2,8ae8 <__sfvwrite_small_dev+0x4c>
    8b14:	9080000b 	ldhu	r2,0(r18)
    8b18:	00ffffc4 	movi	r3,-1
    8b1c:	10801014 	ori	r2,r2,64
    8b20:	9080000d 	sth	r2,0(r18)
    8b24:	1805883a 	mov	r2,r3
    8b28:	dfc00517 	ldw	ra,20(sp)
    8b2c:	dd000417 	ldw	r20,16(sp)
    8b30:	dcc00317 	ldw	r19,12(sp)
    8b34:	dc800217 	ldw	r18,8(sp)
    8b38:	dc400117 	ldw	r17,4(sp)
    8b3c:	dc000017 	ldw	r16,0(sp)
    8b40:	dec00604 	addi	sp,sp,24
    8b44:	f800283a 	ret
    8b48:	0007883a 	mov	r3,zero
    8b4c:	003ff506 	br	8b24 <__sfvwrite_small_dev+0x88>
    8b50:	00ffffc4 	movi	r3,-1
    8b54:	003ff306 	br	8b24 <__sfvwrite_small_dev+0x88>

00008b58 <_write_r>:
    8b58:	defffd04 	addi	sp,sp,-12
    8b5c:	dc000015 	stw	r16,0(sp)
    8b60:	04000074 	movhi	r16,1
    8b64:	842a0904 	addi	r16,r16,-22492
    8b68:	dc400115 	stw	r17,4(sp)
    8b6c:	80000015 	stw	zero,0(r16)
    8b70:	2023883a 	mov	r17,r4
    8b74:	2809883a 	mov	r4,r5
    8b78:	300b883a 	mov	r5,r6
    8b7c:	380d883a 	mov	r6,r7
    8b80:	dfc00215 	stw	ra,8(sp)
    8b84:	0008eac0 	call	8eac <write>
    8b88:	1007883a 	mov	r3,r2
    8b8c:	00bfffc4 	movi	r2,-1
    8b90:	18800626 	beq	r3,r2,8bac <_write_r+0x54>
    8b94:	1805883a 	mov	r2,r3
    8b98:	dfc00217 	ldw	ra,8(sp)
    8b9c:	dc400117 	ldw	r17,4(sp)
    8ba0:	dc000017 	ldw	r16,0(sp)
    8ba4:	dec00304 	addi	sp,sp,12
    8ba8:	f800283a 	ret
    8bac:	80800017 	ldw	r2,0(r16)
    8bb0:	103ff826 	beq	r2,zero,8b94 <_write_r+0x3c>
    8bb4:	88800015 	stw	r2,0(r17)
    8bb8:	1805883a 	mov	r2,r3
    8bbc:	dfc00217 	ldw	ra,8(sp)
    8bc0:	dc400117 	ldw	r17,4(sp)
    8bc4:	dc000017 	ldw	r16,0(sp)
    8bc8:	dec00304 	addi	sp,sp,12
    8bcc:	f800283a 	ret

00008bd0 <udivmodsi4>:
    8bd0:	29001b2e 	bgeu	r5,r4,8c40 <udivmodsi4+0x70>
    8bd4:	28001a16 	blt	r5,zero,8c40 <udivmodsi4+0x70>
    8bd8:	00800044 	movi	r2,1
    8bdc:	0007883a 	mov	r3,zero
    8be0:	01c007c4 	movi	r7,31
    8be4:	00000306 	br	8bf4 <udivmodsi4+0x24>
    8be8:	19c01326 	beq	r3,r7,8c38 <udivmodsi4+0x68>
    8bec:	18c00044 	addi	r3,r3,1
    8bf0:	28000416 	blt	r5,zero,8c04 <udivmodsi4+0x34>
    8bf4:	294b883a 	add	r5,r5,r5
    8bf8:	1085883a 	add	r2,r2,r2
    8bfc:	293ffa36 	bltu	r5,r4,8be8 <udivmodsi4+0x18>
    8c00:	10000d26 	beq	r2,zero,8c38 <udivmodsi4+0x68>
    8c04:	0007883a 	mov	r3,zero
    8c08:	21400236 	bltu	r4,r5,8c14 <udivmodsi4+0x44>
    8c0c:	2149c83a 	sub	r4,r4,r5
    8c10:	1886b03a 	or	r3,r3,r2
    8c14:	1004d07a 	srli	r2,r2,1
    8c18:	280ad07a 	srli	r5,r5,1
    8c1c:	103ffa1e 	bne	r2,zero,8c08 <udivmodsi4+0x38>
    8c20:	30000226 	beq	r6,zero,8c2c <udivmodsi4+0x5c>
    8c24:	2005883a 	mov	r2,r4
    8c28:	f800283a 	ret
    8c2c:	1809883a 	mov	r4,r3
    8c30:	2005883a 	mov	r2,r4
    8c34:	f800283a 	ret
    8c38:	0007883a 	mov	r3,zero
    8c3c:	003ff806 	br	8c20 <udivmodsi4+0x50>
    8c40:	00800044 	movi	r2,1
    8c44:	0007883a 	mov	r3,zero
    8c48:	003fef06 	br	8c08 <udivmodsi4+0x38>

00008c4c <__divsi3>:
    8c4c:	defffe04 	addi	sp,sp,-8
    8c50:	dc000015 	stw	r16,0(sp)
    8c54:	dfc00115 	stw	ra,4(sp)
    8c58:	0021883a 	mov	r16,zero
    8c5c:	20000c16 	blt	r4,zero,8c90 <__divsi3+0x44>
    8c60:	000d883a 	mov	r6,zero
    8c64:	28000e16 	blt	r5,zero,8ca0 <__divsi3+0x54>
    8c68:	0008bd00 	call	8bd0 <udivmodsi4>
    8c6c:	1007883a 	mov	r3,r2
    8c70:	8005003a 	cmpeq	r2,r16,zero
    8c74:	1000011e 	bne	r2,zero,8c7c <__divsi3+0x30>
    8c78:	00c7c83a 	sub	r3,zero,r3
    8c7c:	1805883a 	mov	r2,r3
    8c80:	dfc00117 	ldw	ra,4(sp)
    8c84:	dc000017 	ldw	r16,0(sp)
    8c88:	dec00204 	addi	sp,sp,8
    8c8c:	f800283a 	ret
    8c90:	0109c83a 	sub	r4,zero,r4
    8c94:	04000044 	movi	r16,1
    8c98:	000d883a 	mov	r6,zero
    8c9c:	283ff20e 	bge	r5,zero,8c68 <__divsi3+0x1c>
    8ca0:	014bc83a 	sub	r5,zero,r5
    8ca4:	8021003a 	cmpeq	r16,r16,zero
    8ca8:	003fef06 	br	8c68 <__divsi3+0x1c>

00008cac <__modsi3>:
    8cac:	deffff04 	addi	sp,sp,-4
    8cb0:	dfc00015 	stw	ra,0(sp)
    8cb4:	01800044 	movi	r6,1
    8cb8:	2807883a 	mov	r3,r5
    8cbc:	20000416 	blt	r4,zero,8cd0 <__modsi3+0x24>
    8cc0:	28000c16 	blt	r5,zero,8cf4 <__modsi3+0x48>
    8cc4:	dfc00017 	ldw	ra,0(sp)
    8cc8:	dec00104 	addi	sp,sp,4
    8ccc:	0008bd01 	jmpi	8bd0 <udivmodsi4>
    8cd0:	0109c83a 	sub	r4,zero,r4
    8cd4:	28000b16 	blt	r5,zero,8d04 <__modsi3+0x58>
    8cd8:	180b883a 	mov	r5,r3
    8cdc:	01800044 	movi	r6,1
    8ce0:	0008bd00 	call	8bd0 <udivmodsi4>
    8ce4:	0085c83a 	sub	r2,zero,r2
    8ce8:	dfc00017 	ldw	ra,0(sp)
    8cec:	dec00104 	addi	sp,sp,4
    8cf0:	f800283a 	ret
    8cf4:	014bc83a 	sub	r5,zero,r5
    8cf8:	dfc00017 	ldw	ra,0(sp)
    8cfc:	dec00104 	addi	sp,sp,4
    8d00:	0008bd01 	jmpi	8bd0 <udivmodsi4>
    8d04:	0147c83a 	sub	r3,zero,r5
    8d08:	003ff306 	br	8cd8 <__modsi3+0x2c>

00008d0c <__udivsi3>:
    8d0c:	000d883a 	mov	r6,zero
    8d10:	0008bd01 	jmpi	8bd0 <udivmodsi4>

00008d14 <__umodsi3>:
    8d14:	01800044 	movi	r6,1
    8d18:	0008bd01 	jmpi	8bd0 <udivmodsi4>

00008d1c <__mulsi3>:
    8d1c:	20000a26 	beq	r4,zero,8d48 <__mulsi3+0x2c>
    8d20:	0007883a 	mov	r3,zero
    8d24:	2080004c 	andi	r2,r4,1
    8d28:	1005003a 	cmpeq	r2,r2,zero
    8d2c:	2008d07a 	srli	r4,r4,1
    8d30:	1000011e 	bne	r2,zero,8d38 <__mulsi3+0x1c>
    8d34:	1947883a 	add	r3,r3,r5
    8d38:	294b883a 	add	r5,r5,r5
    8d3c:	203ff91e 	bne	r4,zero,8d24 <__mulsi3+0x8>
    8d40:	1805883a 	mov	r2,r3
    8d44:	f800283a 	ret
    8d48:	0007883a 	mov	r3,zero
    8d4c:	1805883a 	mov	r2,r3
    8d50:	f800283a 	ret

00008d54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8d54:	defffe04 	addi	sp,sp,-8
    8d58:	dfc00115 	stw	ra,4(sp)
    8d5c:	df000015 	stw	fp,0(sp)
    8d60:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8d64:	01000074 	movhi	r4,1
    8d68:	21295404 	addi	r4,r4,-23216
    8d6c:	01400074 	movhi	r5,1
    8d70:	29689f04 	addi	r5,r5,-23940
    8d74:	01800074 	movhi	r6,1
    8d78:	31a95404 	addi	r6,r6,-23216
    8d7c:	0008dd40 	call	8dd4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8d80:	01000074 	movhi	r4,1
    8d84:	21200804 	addi	r4,r4,-32736
    8d88:	01400074 	movhi	r5,1
    8d8c:	29600804 	addi	r5,r5,-32736
    8d90:	01800074 	movhi	r6,1
    8d94:	31a00804 	addi	r6,r6,-32736
    8d98:	0008dd40 	call	8dd4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8d9c:	01000074 	movhi	r4,1
    8da0:	21288504 	addi	r4,r4,-24044
    8da4:	01400074 	movhi	r5,1
    8da8:	29688504 	addi	r5,r5,-24044
    8dac:	01800074 	movhi	r6,1
    8db0:	31a89f04 	addi	r6,r6,-23940
    8db4:	0008dd40 	call	8dd4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8db8:	00094840 	call	9484 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8dbc:	00096a80 	call	96a8 <alt_icache_flush_all>
}
    8dc0:	e037883a 	mov	sp,fp
    8dc4:	dfc00117 	ldw	ra,4(sp)
    8dc8:	df000017 	ldw	fp,0(sp)
    8dcc:	dec00204 	addi	sp,sp,8
    8dd0:	f800283a 	ret

00008dd4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8dd4:	defffc04 	addi	sp,sp,-16
    8dd8:	df000315 	stw	fp,12(sp)
    8ddc:	df000304 	addi	fp,sp,12
    8de0:	e13ffd15 	stw	r4,-12(fp)
    8de4:	e17ffe15 	stw	r5,-8(fp)
    8de8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8dec:	e0fffe17 	ldw	r3,-8(fp)
    8df0:	e0bffd17 	ldw	r2,-12(fp)
    8df4:	18800e26 	beq	r3,r2,8e30 <alt_load_section+0x5c>
  {
    while( to != end )
    8df8:	00000a06 	br	8e24 <alt_load_section+0x50>
    {
      *to++ = *from++;
    8dfc:	e0bffd17 	ldw	r2,-12(fp)
    8e00:	10c00017 	ldw	r3,0(r2)
    8e04:	e0bffe17 	ldw	r2,-8(fp)
    8e08:	10c00015 	stw	r3,0(r2)
    8e0c:	e0bffe17 	ldw	r2,-8(fp)
    8e10:	10800104 	addi	r2,r2,4
    8e14:	e0bffe15 	stw	r2,-8(fp)
    8e18:	e0bffd17 	ldw	r2,-12(fp)
    8e1c:	10800104 	addi	r2,r2,4
    8e20:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8e24:	e0fffe17 	ldw	r3,-8(fp)
    8e28:	e0bfff17 	ldw	r2,-4(fp)
    8e2c:	18bff31e 	bne	r3,r2,8dfc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8e30:	e037883a 	mov	sp,fp
    8e34:	df000017 	ldw	fp,0(sp)
    8e38:	dec00104 	addi	sp,sp,4
    8e3c:	f800283a 	ret

00008e40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8e40:	defffd04 	addi	sp,sp,-12
    8e44:	dfc00215 	stw	ra,8(sp)
    8e48:	df000115 	stw	fp,4(sp)
    8e4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8e50:	0009883a 	mov	r4,zero
    8e54:	00090300 	call	9030 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8e58:	00090640 	call	9064 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8e5c:	01000074 	movhi	r4,1
    8e60:	21289204 	addi	r4,r4,-23992
    8e64:	01400074 	movhi	r5,1
    8e68:	29689204 	addi	r5,r5,-23992
    8e6c:	01800074 	movhi	r6,1
    8e70:	31a89204 	addi	r6,r6,-23992
    8e74:	000979c0 	call	979c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8e78:	00095e00 	call	95e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    8e7c:	01000074 	movhi	r4,1
    8e80:	21259104 	addi	r4,r4,-27068
    8e84:	0009e140 	call	9e14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8e88:	d120be17 	ldw	r4,-32008(gp)
    8e8c:	d160bf17 	ldw	r5,-32004(gp)
    8e90:	d1a0c017 	ldw	r6,-32000(gp)
    8e94:	000805c0 	call	805c <main>
    8e98:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8e9c:	01000044 	movi	r4,1
    8ea0:	00093240 	call	9324 <close>
  exit (result);
    8ea4:	e13fff17 	ldw	r4,-4(fp)
    8ea8:	0009e280 	call	9e28 <exit>

00008eac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8eac:	defff704 	addi	sp,sp,-36
    8eb0:	dfc00815 	stw	ra,32(sp)
    8eb4:	df000715 	stw	fp,28(sp)
    8eb8:	df000704 	addi	fp,sp,28
    8ebc:	e13ffb15 	stw	r4,-20(fp)
    8ec0:	e17ffc15 	stw	r5,-16(fp)
    8ec4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8ec8:	e0bffb17 	ldw	r2,-20(fp)
    8ecc:	1004803a 	cmplt	r2,r2,zero
    8ed0:	1000091e 	bne	r2,zero,8ef8 <write+0x4c>
    8ed4:	e13ffb17 	ldw	r4,-20(fp)
    8ed8:	01400304 	movi	r5,12
    8edc:	0008d1c0 	call	8d1c <__mulsi3>
    8ee0:	1007883a 	mov	r3,r2
    8ee4:	00800074 	movhi	r2,1
    8ee8:	10a8ec04 	addi	r2,r2,-23632
    8eec:	1887883a 	add	r3,r3,r2
    8ef0:	e0ffff15 	stw	r3,-4(fp)
    8ef4:	00000106 	br	8efc <write+0x50>
    8ef8:	e03fff15 	stw	zero,-4(fp)
    8efc:	e0bfff17 	ldw	r2,-4(fp)
    8f00:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    8f04:	e0bffa17 	ldw	r2,-24(fp)
    8f08:	1005003a 	cmpeq	r2,r2,zero
    8f0c:	1000241e 	bne	r2,zero,8fa0 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8f10:	e0bffa17 	ldw	r2,-24(fp)
    8f14:	10800217 	ldw	r2,8(r2)
    8f18:	108000cc 	andi	r2,r2,3
    8f1c:	1005003a 	cmpeq	r2,r2,zero
    8f20:	10001a1e 	bne	r2,zero,8f8c <write+0xe0>
    8f24:	e0bffa17 	ldw	r2,-24(fp)
    8f28:	10800017 	ldw	r2,0(r2)
    8f2c:	10800617 	ldw	r2,24(r2)
    8f30:	1005003a 	cmpeq	r2,r2,zero
    8f34:	1000151e 	bne	r2,zero,8f8c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8f38:	e0bffa17 	ldw	r2,-24(fp)
    8f3c:	10800017 	ldw	r2,0(r2)
    8f40:	10800617 	ldw	r2,24(r2)
    8f44:	e17ffc17 	ldw	r5,-16(fp)
    8f48:	e1bffd17 	ldw	r6,-12(fp)
    8f4c:	e13ffa17 	ldw	r4,-24(fp)
    8f50:	103ee83a 	callr	r2
    8f54:	e0bff915 	stw	r2,-28(fp)
    8f58:	e0bff917 	ldw	r2,-28(fp)
    8f5c:	1004403a 	cmpge	r2,r2,zero
    8f60:	1000071e 	bne	r2,zero,8f80 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    8f64:	0008fd00 	call	8fd0 <alt_get_errno>
    8f68:	e0fff917 	ldw	r3,-28(fp)
    8f6c:	00c7c83a 	sub	r3,zero,r3
    8f70:	10c00015 	stw	r3,0(r2)
        return -1;
    8f74:	00bfffc4 	movi	r2,-1
    8f78:	e0bffe15 	stw	r2,-8(fp)
    8f7c:	00000e06 	br	8fb8 <write+0x10c>
      }
      return rval;
    8f80:	e0bff917 	ldw	r2,-28(fp)
    8f84:	e0bffe15 	stw	r2,-8(fp)
    8f88:	00000b06 	br	8fb8 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8f8c:	0008fd00 	call	8fd0 <alt_get_errno>
    8f90:	1007883a 	mov	r3,r2
    8f94:	00800344 	movi	r2,13
    8f98:	18800015 	stw	r2,0(r3)
    8f9c:	00000406 	br	8fb0 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8fa0:	0008fd00 	call	8fd0 <alt_get_errno>
    8fa4:	1007883a 	mov	r3,r2
    8fa8:	00801444 	movi	r2,81
    8fac:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8fb0:	00bfffc4 	movi	r2,-1
    8fb4:	e0bffe15 	stw	r2,-8(fp)
    8fb8:	e0bffe17 	ldw	r2,-8(fp)
}
    8fbc:	e037883a 	mov	sp,fp
    8fc0:	dfc00117 	ldw	ra,4(sp)
    8fc4:	df000017 	ldw	fp,0(sp)
    8fc8:	dec00204 	addi	sp,sp,8
    8fcc:	f800283a 	ret

00008fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8fd0:	defffd04 	addi	sp,sp,-12
    8fd4:	dfc00215 	stw	ra,8(sp)
    8fd8:	df000115 	stw	fp,4(sp)
    8fdc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    8fe0:	00800074 	movhi	r2,1
    8fe4:	10a95304 	addi	r2,r2,-23220
    8fe8:	10800017 	ldw	r2,0(r2)
    8fec:	1005003a 	cmpeq	r2,r2,zero
    8ff0:	1000061e 	bne	r2,zero,900c <alt_get_errno+0x3c>
    8ff4:	00800074 	movhi	r2,1
    8ff8:	10a95304 	addi	r2,r2,-23220
    8ffc:	10800017 	ldw	r2,0(r2)
    9000:	103ee83a 	callr	r2
    9004:	e0bfff15 	stw	r2,-4(fp)
    9008:	00000306 	br	9018 <alt_get_errno+0x48>
    900c:	00800074 	movhi	r2,1
    9010:	10aa0904 	addi	r2,r2,-22492
    9014:	e0bfff15 	stw	r2,-4(fp)
    9018:	e0bfff17 	ldw	r2,-4(fp)
}
    901c:	e037883a 	mov	sp,fp
    9020:	dfc00117 	ldw	ra,4(sp)
    9024:	df000017 	ldw	fp,0(sp)
    9028:	dec00204 	addi	sp,sp,8
    902c:	f800283a 	ret

00009030 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9030:	defffd04 	addi	sp,sp,-12
    9034:	dfc00215 	stw	ra,8(sp)
    9038:	df000115 	stw	fp,4(sp)
    903c:	df000104 	addi	fp,sp,4
    9040:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    9044:	0009b700 	call	9b70 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9048:	00800044 	movi	r2,1
    904c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9050:	e037883a 	mov	sp,fp
    9054:	dfc00117 	ldw	ra,4(sp)
    9058:	df000017 	ldw	fp,0(sp)
    905c:	dec00204 	addi	sp,sp,8
    9060:	f800283a 	ret

00009064 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9064:	defffe04 	addi	sp,sp,-8
    9068:	dfc00115 	stw	ra,4(sp)
    906c:	df000015 	stw	fp,0(sp)
    9070:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9074:	01000074 	movhi	r4,1
    9078:	2128d704 	addi	r4,r4,-23716
    907c:	00090940 	call	9094 <alt_dev_reg>
}
    9080:	e037883a 	mov	sp,fp
    9084:	dfc00117 	ldw	ra,4(sp)
    9088:	df000017 	ldw	fp,0(sp)
    908c:	dec00204 	addi	sp,sp,8
    9090:	f800283a 	ret

00009094 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9094:	defffd04 	addi	sp,sp,-12
    9098:	dfc00215 	stw	ra,8(sp)
    909c:	df000115 	stw	fp,4(sp)
    90a0:	df000104 	addi	fp,sp,4
    90a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    90a8:	e13fff17 	ldw	r4,-4(fp)
    90ac:	01400074 	movhi	r5,1
    90b0:	29695004 	addi	r5,r5,-23232
    90b4:	00094cc0 	call	94cc <alt_dev_llist_insert>
}
    90b8:	e037883a 	mov	sp,fp
    90bc:	dfc00117 	ldw	ra,4(sp)
    90c0:	df000017 	ldw	fp,0(sp)
    90c4:	dec00204 	addi	sp,sp,8
    90c8:	f800283a 	ret

000090cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    90cc:	defffa04 	addi	sp,sp,-24
    90d0:	dfc00515 	stw	ra,20(sp)
    90d4:	df000415 	stw	fp,16(sp)
    90d8:	df000404 	addi	fp,sp,16
    90dc:	e13ffd15 	stw	r4,-12(fp)
    90e0:	e17ffe15 	stw	r5,-8(fp)
    90e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    90e8:	e0bffd17 	ldw	r2,-12(fp)
    90ec:	10800017 	ldw	r2,0(r2)
    90f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    90f4:	e0bffc17 	ldw	r2,-16(fp)
    90f8:	11000a04 	addi	r4,r2,40
    90fc:	e0bffd17 	ldw	r2,-12(fp)
    9100:	11c00217 	ldw	r7,8(r2)
    9104:	e17ffe17 	ldw	r5,-8(fp)
    9108:	e1bfff17 	ldw	r6,-4(fp)
    910c:	000917c0 	call	917c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9110:	e037883a 	mov	sp,fp
    9114:	dfc00117 	ldw	ra,4(sp)
    9118:	df000017 	ldw	fp,0(sp)
    911c:	dec00204 	addi	sp,sp,8
    9120:	f800283a 	ret

00009124 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9124:	defffa04 	addi	sp,sp,-24
    9128:	dfc00515 	stw	ra,20(sp)
    912c:	df000415 	stw	fp,16(sp)
    9130:	df000404 	addi	fp,sp,16
    9134:	e13ffd15 	stw	r4,-12(fp)
    9138:	e17ffe15 	stw	r5,-8(fp)
    913c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9140:	e0bffd17 	ldw	r2,-12(fp)
    9144:	10800017 	ldw	r2,0(r2)
    9148:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    914c:	e0bffc17 	ldw	r2,-16(fp)
    9150:	11000a04 	addi	r4,r2,40
    9154:	e0bffd17 	ldw	r2,-12(fp)
    9158:	11c00217 	ldw	r7,8(r2)
    915c:	e17ffe17 	ldw	r5,-8(fp)
    9160:	e1bfff17 	ldw	r6,-4(fp)
    9164:	00092800 	call	9280 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9168:	e037883a 	mov	sp,fp
    916c:	dfc00117 	ldw	ra,4(sp)
    9170:	df000017 	ldw	fp,0(sp)
    9174:	dec00204 	addi	sp,sp,8
    9178:	f800283a 	ret

0000917c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    917c:	defff604 	addi	sp,sp,-40
    9180:	df000915 	stw	fp,36(sp)
    9184:	df000904 	addi	fp,sp,36
    9188:	e13ffb15 	stw	r4,-20(fp)
    918c:	e17ffc15 	stw	r5,-16(fp)
    9190:	e1bffd15 	stw	r6,-12(fp)
    9194:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    9198:	e0bffb17 	ldw	r2,-20(fp)
    919c:	10800017 	ldw	r2,0(r2)
    91a0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    91a4:	e0bffc17 	ldw	r2,-16(fp)
    91a8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    91ac:	e0bffd17 	ldw	r2,-12(fp)
    91b0:	1007883a 	mov	r3,r2
    91b4:	e0bffc17 	ldw	r2,-16(fp)
    91b8:	10c5883a 	add	r2,r2,r3
    91bc:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    91c0:	00001606 	br	921c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    91c4:	e0bffa17 	ldw	r2,-24(fp)
    91c8:	10800037 	ldwio	r2,0(r2)
    91cc:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    91d0:	e0bff717 	ldw	r2,-36(fp)
    91d4:	10a0000c 	andi	r2,r2,32768
    91d8:	1005003a 	cmpeq	r2,r2,zero
    91dc:	1000081e 	bne	r2,zero,9200 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    91e0:	e0bff717 	ldw	r2,-36(fp)
    91e4:	1007883a 	mov	r3,r2
    91e8:	e0bff917 	ldw	r2,-28(fp)
    91ec:	10c00005 	stb	r3,0(r2)
    91f0:	e0bff917 	ldw	r2,-28(fp)
    91f4:	10800044 	addi	r2,r2,1
    91f8:	e0bff915 	stw	r2,-28(fp)
    91fc:	00000706 	br	921c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    9200:	e0fff917 	ldw	r3,-28(fp)
    9204:	e0bffc17 	ldw	r2,-16(fp)
    9208:	1880071e 	bne	r3,r2,9228 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    920c:	e0bffe17 	ldw	r2,-8(fp)
    9210:	1090000c 	andi	r2,r2,16384
    9214:	1004c03a 	cmpne	r2,r2,zero
    9218:	1000031e 	bne	r2,zero,9228 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    921c:	e0fff917 	ldw	r3,-28(fp)
    9220:	e0bff817 	ldw	r2,-32(fp)
    9224:	18bfe736 	bltu	r3,r2,91c4 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    9228:	e0fff917 	ldw	r3,-28(fp)
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	18800526 	beq	r3,r2,9248 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    9234:	e0fff917 	ldw	r3,-28(fp)
    9238:	e0bffc17 	ldw	r2,-16(fp)
    923c:	1887c83a 	sub	r3,r3,r2
    9240:	e0ffff15 	stw	r3,-4(fp)
    9244:	00000906 	br	926c <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    9248:	e0bffe17 	ldw	r2,-8(fp)
    924c:	1090000c 	andi	r2,r2,16384
    9250:	1005003a 	cmpeq	r2,r2,zero
    9254:	1000031e 	bne	r2,zero,9264 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    9258:	00bffd44 	movi	r2,-11
    925c:	e0bfff15 	stw	r2,-4(fp)
    9260:	00000206 	br	926c <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    9264:	00bffec4 	movi	r2,-5
    9268:	e0bfff15 	stw	r2,-4(fp)
    926c:	e0bfff17 	ldw	r2,-4(fp)
}
    9270:	e037883a 	mov	sp,fp
    9274:	df000017 	ldw	fp,0(sp)
    9278:	dec00104 	addi	sp,sp,4
    927c:	f800283a 	ret

00009280 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9280:	defff904 	addi	sp,sp,-28
    9284:	df000615 	stw	fp,24(sp)
    9288:	df000604 	addi	fp,sp,24
    928c:	e13ffc15 	stw	r4,-16(fp)
    9290:	e17ffd15 	stw	r5,-12(fp)
    9294:	e1bffe15 	stw	r6,-8(fp)
    9298:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    929c:	e0bffc17 	ldw	r2,-16(fp)
    92a0:	10800017 	ldw	r2,0(r2)
    92a4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    92a8:	e0bffe17 	ldw	r2,-8(fp)
    92ac:	1007883a 	mov	r3,r2
    92b0:	e0bffd17 	ldw	r2,-12(fp)
    92b4:	10c5883a 	add	r2,r2,r3
    92b8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    92bc:	00001106 	br	9304 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    92c0:	e0bffb17 	ldw	r2,-20(fp)
    92c4:	10800104 	addi	r2,r2,4
    92c8:	10800037 	ldwio	r2,0(r2)
    92cc:	10bfffec 	andhi	r2,r2,65535
    92d0:	1005003a 	cmpeq	r2,r2,zero
    92d4:	10000b1e 	bne	r2,zero,9304 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    92d8:	e13ffb17 	ldw	r4,-20(fp)
    92dc:	e0bffd17 	ldw	r2,-12(fp)
    92e0:	10800003 	ldbu	r2,0(r2)
    92e4:	10c03fcc 	andi	r3,r2,255
    92e8:	18c0201c 	xori	r3,r3,128
    92ec:	18ffe004 	addi	r3,r3,-128
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	10800044 	addi	r2,r2,1
    92f8:	e0bffd15 	stw	r2,-12(fp)
    92fc:	2005883a 	mov	r2,r4
    9300:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9304:	e0fffd17 	ldw	r3,-12(fp)
    9308:	e0bffa17 	ldw	r2,-24(fp)
    930c:	18bfec36 	bltu	r3,r2,92c0 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9310:	e0bffe17 	ldw	r2,-8(fp)
}
    9314:	e037883a 	mov	sp,fp
    9318:	df000017 	ldw	fp,0(sp)
    931c:	dec00104 	addi	sp,sp,4
    9320:	f800283a 	ret

00009324 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9324:	defff804 	addi	sp,sp,-32
    9328:	dfc00715 	stw	ra,28(sp)
    932c:	df000615 	stw	fp,24(sp)
    9330:	df000604 	addi	fp,sp,24
    9334:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9338:	e0bffc17 	ldw	r2,-16(fp)
    933c:	1004803a 	cmplt	r2,r2,zero
    9340:	1000091e 	bne	r2,zero,9368 <close+0x44>
    9344:	e13ffc17 	ldw	r4,-16(fp)
    9348:	01400304 	movi	r5,12
    934c:	0008d1c0 	call	8d1c <__mulsi3>
    9350:	1007883a 	mov	r3,r2
    9354:	00800074 	movhi	r2,1
    9358:	10a8ec04 	addi	r2,r2,-23632
    935c:	1887883a 	add	r3,r3,r2
    9360:	e0ffff15 	stw	r3,-4(fp)
    9364:	00000106 	br	936c <close+0x48>
    9368:	e03fff15 	stw	zero,-4(fp)
    936c:	e0bfff17 	ldw	r2,-4(fp)
    9370:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9374:	e0bffb17 	ldw	r2,-20(fp)
    9378:	1005003a 	cmpeq	r2,r2,zero
    937c:	10001d1e 	bne	r2,zero,93f4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9380:	e0bffb17 	ldw	r2,-20(fp)
    9384:	10800017 	ldw	r2,0(r2)
    9388:	10800417 	ldw	r2,16(r2)
    938c:	1005003a 	cmpeq	r2,r2,zero
    9390:	1000071e 	bne	r2,zero,93b0 <close+0x8c>
    9394:	e0bffb17 	ldw	r2,-20(fp)
    9398:	10800017 	ldw	r2,0(r2)
    939c:	10800417 	ldw	r2,16(r2)
    93a0:	e13ffb17 	ldw	r4,-20(fp)
    93a4:	103ee83a 	callr	r2
    93a8:	e0bffe15 	stw	r2,-8(fp)
    93ac:	00000106 	br	93b4 <close+0x90>
    93b0:	e03ffe15 	stw	zero,-8(fp)
    93b4:	e0bffe17 	ldw	r2,-8(fp)
    93b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    93bc:	e13ffc17 	ldw	r4,-16(fp)
    93c0:	0009af80 	call	9af8 <alt_release_fd>
    if (rval < 0)
    93c4:	e0bffa17 	ldw	r2,-24(fp)
    93c8:	1004403a 	cmpge	r2,r2,zero
    93cc:	1000071e 	bne	r2,zero,93ec <close+0xc8>
    {
      ALT_ERRNO = -rval;
    93d0:	00094240 	call	9424 <alt_get_errno>
    93d4:	e0fffa17 	ldw	r3,-24(fp)
    93d8:	00c7c83a 	sub	r3,zero,r3
    93dc:	10c00015 	stw	r3,0(r2)
      return -1;
    93e0:	00bfffc4 	movi	r2,-1
    93e4:	e0bffd15 	stw	r2,-12(fp)
    93e8:	00000806 	br	940c <close+0xe8>
    }
    return 0;
    93ec:	e03ffd15 	stw	zero,-12(fp)
    93f0:	00000606 	br	940c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    93f4:	00094240 	call	9424 <alt_get_errno>
    93f8:	1007883a 	mov	r3,r2
    93fc:	00801444 	movi	r2,81
    9400:	18800015 	stw	r2,0(r3)
    return -1;
    9404:	00bfffc4 	movi	r2,-1
    9408:	e0bffd15 	stw	r2,-12(fp)
    940c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9410:	e037883a 	mov	sp,fp
    9414:	dfc00117 	ldw	ra,4(sp)
    9418:	df000017 	ldw	fp,0(sp)
    941c:	dec00204 	addi	sp,sp,8
    9420:	f800283a 	ret

00009424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9424:	defffd04 	addi	sp,sp,-12
    9428:	dfc00215 	stw	ra,8(sp)
    942c:	df000115 	stw	fp,4(sp)
    9430:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9434:	00800074 	movhi	r2,1
    9438:	10a95304 	addi	r2,r2,-23220
    943c:	10800017 	ldw	r2,0(r2)
    9440:	1005003a 	cmpeq	r2,r2,zero
    9444:	1000061e 	bne	r2,zero,9460 <alt_get_errno+0x3c>
    9448:	00800074 	movhi	r2,1
    944c:	10a95304 	addi	r2,r2,-23220
    9450:	10800017 	ldw	r2,0(r2)
    9454:	103ee83a 	callr	r2
    9458:	e0bfff15 	stw	r2,-4(fp)
    945c:	00000306 	br	946c <alt_get_errno+0x48>
    9460:	00800074 	movhi	r2,1
    9464:	10aa0904 	addi	r2,r2,-22492
    9468:	e0bfff15 	stw	r2,-4(fp)
    946c:	e0bfff17 	ldw	r2,-4(fp)
}
    9470:	e037883a 	mov	sp,fp
    9474:	dfc00117 	ldw	ra,4(sp)
    9478:	df000017 	ldw	fp,0(sp)
    947c:	dec00204 	addi	sp,sp,8
    9480:	f800283a 	ret

00009484 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9484:	deffff04 	addi	sp,sp,-4
    9488:	df000015 	stw	fp,0(sp)
    948c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9490:	e037883a 	mov	sp,fp
    9494:	df000017 	ldw	fp,0(sp)
    9498:	dec00104 	addi	sp,sp,4
    949c:	f800283a 	ret

000094a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    94a0:	defffc04 	addi	sp,sp,-16
    94a4:	df000315 	stw	fp,12(sp)
    94a8:	df000304 	addi	fp,sp,12
    94ac:	e13ffd15 	stw	r4,-12(fp)
    94b0:	e17ffe15 	stw	r5,-8(fp)
    94b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    94b8:	e0bfff17 	ldw	r2,-4(fp)
}
    94bc:	e037883a 	mov	sp,fp
    94c0:	df000017 	ldw	fp,0(sp)
    94c4:	dec00104 	addi	sp,sp,4
    94c8:	f800283a 	ret

000094cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    94cc:	defff904 	addi	sp,sp,-28
    94d0:	dfc00615 	stw	ra,24(sp)
    94d4:	df000515 	stw	fp,20(sp)
    94d8:	df000504 	addi	fp,sp,20
    94dc:	e13ffd15 	stw	r4,-12(fp)
    94e0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    94e4:	e0bffd17 	ldw	r2,-12(fp)
    94e8:	1005003a 	cmpeq	r2,r2,zero
    94ec:	1000041e 	bne	r2,zero,9500 <alt_dev_llist_insert+0x34>
    94f0:	e0bffd17 	ldw	r2,-12(fp)
    94f4:	10800217 	ldw	r2,8(r2)
    94f8:	1004c03a 	cmpne	r2,r2,zero
    94fc:	1000071e 	bne	r2,zero,951c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    9500:	00095800 	call	9580 <alt_get_errno>
    9504:	1007883a 	mov	r3,r2
    9508:	00800584 	movi	r2,22
    950c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9510:	00bffa84 	movi	r2,-22
    9514:	e0bfff15 	stw	r2,-4(fp)
    9518:	00001306 	br	9568 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    951c:	e0fffd17 	ldw	r3,-12(fp)
    9520:	e0bffe17 	ldw	r2,-8(fp)
    9524:	e0bffb15 	stw	r2,-20(fp)
    9528:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    952c:	e0fffc17 	ldw	r3,-16(fp)
    9530:	e0bffb17 	ldw	r2,-20(fp)
    9534:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    9538:	e0bffb17 	ldw	r2,-20(fp)
    953c:	10c00017 	ldw	r3,0(r2)
    9540:	e0bffc17 	ldw	r2,-16(fp)
    9544:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9548:	e0bffb17 	ldw	r2,-20(fp)
    954c:	10c00017 	ldw	r3,0(r2)
    9550:	e0bffc17 	ldw	r2,-16(fp)
    9554:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    9558:	e0fffb17 	ldw	r3,-20(fp)
    955c:	e0bffc17 	ldw	r2,-16(fp)
    9560:	18800015 	stw	r2,0(r3)

  return 0;  
    9564:	e03fff15 	stw	zero,-4(fp)
    9568:	e0bfff17 	ldw	r2,-4(fp)
}
    956c:	e037883a 	mov	sp,fp
    9570:	dfc00117 	ldw	ra,4(sp)
    9574:	df000017 	ldw	fp,0(sp)
    9578:	dec00204 	addi	sp,sp,8
    957c:	f800283a 	ret

00009580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9580:	defffd04 	addi	sp,sp,-12
    9584:	dfc00215 	stw	ra,8(sp)
    9588:	df000115 	stw	fp,4(sp)
    958c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9590:	00800074 	movhi	r2,1
    9594:	10a95304 	addi	r2,r2,-23220
    9598:	10800017 	ldw	r2,0(r2)
    959c:	1005003a 	cmpeq	r2,r2,zero
    95a0:	1000061e 	bne	r2,zero,95bc <alt_get_errno+0x3c>
    95a4:	00800074 	movhi	r2,1
    95a8:	10a95304 	addi	r2,r2,-23220
    95ac:	10800017 	ldw	r2,0(r2)
    95b0:	103ee83a 	callr	r2
    95b4:	e0bfff15 	stw	r2,-4(fp)
    95b8:	00000306 	br	95c8 <alt_get_errno+0x48>
    95bc:	00800074 	movhi	r2,1
    95c0:	10aa0904 	addi	r2,r2,-22492
    95c4:	e0bfff15 	stw	r2,-4(fp)
    95c8:	e0bfff17 	ldw	r2,-4(fp)
}
    95cc:	e037883a 	mov	sp,fp
    95d0:	dfc00117 	ldw	ra,4(sp)
    95d4:	df000017 	ldw	fp,0(sp)
    95d8:	dec00204 	addi	sp,sp,8
    95dc:	f800283a 	ret

000095e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    95e0:	defffd04 	addi	sp,sp,-12
    95e4:	dfc00215 	stw	ra,8(sp)
    95e8:	df000115 	stw	fp,4(sp)
    95ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    95f0:	00bfff04 	movi	r2,-4
    95f4:	00c00074 	movhi	r3,1
    95f8:	18e88504 	addi	r3,r3,-24044
    95fc:	1885883a 	add	r2,r3,r2
    9600:	e0bfff15 	stw	r2,-4(fp)
    9604:	00000606 	br	9620 <_do_ctors+0x40>
        (*ctor) (); 
    9608:	e0bfff17 	ldw	r2,-4(fp)
    960c:	10800017 	ldw	r2,0(r2)
    9610:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9614:	e0bfff17 	ldw	r2,-4(fp)
    9618:	10bfff04 	addi	r2,r2,-4
    961c:	e0bfff15 	stw	r2,-4(fp)
    9620:	e0ffff17 	ldw	r3,-4(fp)
    9624:	00800074 	movhi	r2,1
    9628:	10a88404 	addi	r2,r2,-24048
    962c:	18bff62e 	bgeu	r3,r2,9608 <_do_ctors+0x28>
        (*ctor) (); 
}
    9630:	e037883a 	mov	sp,fp
    9634:	dfc00117 	ldw	ra,4(sp)
    9638:	df000017 	ldw	fp,0(sp)
    963c:	dec00204 	addi	sp,sp,8
    9640:	f800283a 	ret

00009644 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9644:	defffd04 	addi	sp,sp,-12
    9648:	dfc00215 	stw	ra,8(sp)
    964c:	df000115 	stw	fp,4(sp)
    9650:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9654:	00bfff04 	movi	r2,-4
    9658:	00c00074 	movhi	r3,1
    965c:	18e88504 	addi	r3,r3,-24044
    9660:	1885883a 	add	r2,r3,r2
    9664:	e0bfff15 	stw	r2,-4(fp)
    9668:	00000606 	br	9684 <_do_dtors+0x40>
        (*dtor) (); 
    966c:	e0bfff17 	ldw	r2,-4(fp)
    9670:	10800017 	ldw	r2,0(r2)
    9674:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9678:	e0bfff17 	ldw	r2,-4(fp)
    967c:	10bfff04 	addi	r2,r2,-4
    9680:	e0bfff15 	stw	r2,-4(fp)
    9684:	e0ffff17 	ldw	r3,-4(fp)
    9688:	00800074 	movhi	r2,1
    968c:	10a88504 	addi	r2,r2,-24044
    9690:	18bff62e 	bgeu	r3,r2,966c <_do_dtors+0x28>
        (*dtor) (); 
}
    9694:	e037883a 	mov	sp,fp
    9698:	dfc00117 	ldw	ra,4(sp)
    969c:	df000017 	ldw	fp,0(sp)
    96a0:	dec00204 	addi	sp,sp,8
    96a4:	f800283a 	ret

000096a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    96a8:	deffff04 	addi	sp,sp,-4
    96ac:	df000015 	stw	fp,0(sp)
    96b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    96b4:	e037883a 	mov	sp,fp
    96b8:	df000017 	ldw	fp,0(sp)
    96bc:	dec00104 	addi	sp,sp,4
    96c0:	f800283a 	ret

000096c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    96c4:	defff804 	addi	sp,sp,-32
    96c8:	dfc00715 	stw	ra,28(sp)
    96cc:	df000615 	stw	fp,24(sp)
    96d0:	dc000515 	stw	r16,20(sp)
    96d4:	df000504 	addi	fp,sp,20
    96d8:	e13ffc15 	stw	r4,-16(fp)
    96dc:	e17ffd15 	stw	r5,-12(fp)
    96e0:	e1bffe15 	stw	r6,-8(fp)
    96e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    96e8:	e13ffd17 	ldw	r4,-12(fp)
    96ec:	e17ffe17 	ldw	r5,-8(fp)
    96f0:	e1bfff17 	ldw	r6,-4(fp)
    96f4:	000990c0 	call	990c <open>
    96f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    96fc:	e0bffb17 	ldw	r2,-20(fp)
    9700:	1004803a 	cmplt	r2,r2,zero
    9704:	10001f1e 	bne	r2,zero,9784 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    9708:	e13ffb17 	ldw	r4,-20(fp)
    970c:	04000074 	movhi	r16,1
    9710:	8428ec04 	addi	r16,r16,-23632
    9714:	01400304 	movi	r5,12
    9718:	0008d1c0 	call	8d1c <__mulsi3>
    971c:	1405883a 	add	r2,r2,r16
    9720:	10c00017 	ldw	r3,0(r2)
    9724:	e0bffc17 	ldw	r2,-16(fp)
    9728:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    972c:	e13ffb17 	ldw	r4,-20(fp)
    9730:	04000074 	movhi	r16,1
    9734:	8428ec04 	addi	r16,r16,-23632
    9738:	01400304 	movi	r5,12
    973c:	0008d1c0 	call	8d1c <__mulsi3>
    9740:	1405883a 	add	r2,r2,r16
    9744:	10800104 	addi	r2,r2,4
    9748:	10c00017 	ldw	r3,0(r2)
    974c:	e0bffc17 	ldw	r2,-16(fp)
    9750:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9754:	e13ffb17 	ldw	r4,-20(fp)
    9758:	04000074 	movhi	r16,1
    975c:	8428ec04 	addi	r16,r16,-23632
    9760:	01400304 	movi	r5,12
    9764:	0008d1c0 	call	8d1c <__mulsi3>
    9768:	1405883a 	add	r2,r2,r16
    976c:	10800204 	addi	r2,r2,8
    9770:	10c00017 	ldw	r3,0(r2)
    9774:	e0bffc17 	ldw	r2,-16(fp)
    9778:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    977c:	e13ffb17 	ldw	r4,-20(fp)
    9780:	0009af80 	call	9af8 <alt_release_fd>
  }
} 
    9784:	e037883a 	mov	sp,fp
    9788:	dfc00217 	ldw	ra,8(sp)
    978c:	df000117 	ldw	fp,4(sp)
    9790:	dc000017 	ldw	r16,0(sp)
    9794:	dec00304 	addi	sp,sp,12
    9798:	f800283a 	ret

0000979c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    979c:	defffb04 	addi	sp,sp,-20
    97a0:	dfc00415 	stw	ra,16(sp)
    97a4:	df000315 	stw	fp,12(sp)
    97a8:	df000304 	addi	fp,sp,12
    97ac:	e13ffd15 	stw	r4,-12(fp)
    97b0:	e17ffe15 	stw	r5,-8(fp)
    97b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    97b8:	01000074 	movhi	r4,1
    97bc:	2128ef04 	addi	r4,r4,-23620
    97c0:	e17ffd17 	ldw	r5,-12(fp)
    97c4:	01800044 	movi	r6,1
    97c8:	01c07fc4 	movi	r7,511
    97cc:	00096c40 	call	96c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    97d0:	01000074 	movhi	r4,1
    97d4:	2128ec04 	addi	r4,r4,-23632
    97d8:	e17ffe17 	ldw	r5,-8(fp)
    97dc:	000d883a 	mov	r6,zero
    97e0:	01c07fc4 	movi	r7,511
    97e4:	00096c40 	call	96c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    97e8:	01000074 	movhi	r4,1
    97ec:	2128f204 	addi	r4,r4,-23608
    97f0:	e17fff17 	ldw	r5,-4(fp)
    97f4:	01800044 	movi	r6,1
    97f8:	01c07fc4 	movi	r7,511
    97fc:	00096c40 	call	96c4 <alt_open_fd>
}  
    9800:	e037883a 	mov	sp,fp
    9804:	dfc00117 	ldw	ra,4(sp)
    9808:	df000017 	ldw	fp,0(sp)
    980c:	dec00204 	addi	sp,sp,8
    9810:	f800283a 	ret

00009814 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9814:	defffa04 	addi	sp,sp,-24
    9818:	dfc00515 	stw	ra,20(sp)
    981c:	df000415 	stw	fp,16(sp)
    9820:	dc000315 	stw	r16,12(sp)
    9824:	df000304 	addi	fp,sp,12
    9828:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    982c:	e0bffe17 	ldw	r2,-8(fp)
    9830:	10800217 	ldw	r2,8(r2)
    9834:	10d00034 	orhi	r3,r2,16384
    9838:	e0bffe17 	ldw	r2,-8(fp)
    983c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9840:	e03ffd15 	stw	zero,-12(fp)
    9844:	00002306 	br	98d4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9848:	e13ffd17 	ldw	r4,-12(fp)
    984c:	04000074 	movhi	r16,1
    9850:	8428ec04 	addi	r16,r16,-23632
    9854:	01400304 	movi	r5,12
    9858:	0008d1c0 	call	8d1c <__mulsi3>
    985c:	1405883a 	add	r2,r2,r16
    9860:	10c00017 	ldw	r3,0(r2)
    9864:	e0bffe17 	ldw	r2,-8(fp)
    9868:	10800017 	ldw	r2,0(r2)
    986c:	1880161e 	bne	r3,r2,98c8 <alt_file_locked+0xb4>
    9870:	e13ffd17 	ldw	r4,-12(fp)
    9874:	04000074 	movhi	r16,1
    9878:	8428ec04 	addi	r16,r16,-23632
    987c:	01400304 	movi	r5,12
    9880:	0008d1c0 	call	8d1c <__mulsi3>
    9884:	1405883a 	add	r2,r2,r16
    9888:	10800204 	addi	r2,r2,8
    988c:	10800017 	ldw	r2,0(r2)
    9890:	1004403a 	cmpge	r2,r2,zero
    9894:	10000c1e 	bne	r2,zero,98c8 <alt_file_locked+0xb4>
    9898:	e13ffd17 	ldw	r4,-12(fp)
    989c:	01400304 	movi	r5,12
    98a0:	0008d1c0 	call	8d1c <__mulsi3>
    98a4:	1007883a 	mov	r3,r2
    98a8:	00800074 	movhi	r2,1
    98ac:	10a8ec04 	addi	r2,r2,-23632
    98b0:	1887883a 	add	r3,r3,r2
    98b4:	e0bffe17 	ldw	r2,-8(fp)
    98b8:	18800326 	beq	r3,r2,98c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    98bc:	00bffcc4 	movi	r2,-13
    98c0:	e0bfff15 	stw	r2,-4(fp)
    98c4:	00000a06 	br	98f0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    98c8:	e0bffd17 	ldw	r2,-12(fp)
    98cc:	10800044 	addi	r2,r2,1
    98d0:	e0bffd15 	stw	r2,-12(fp)
    98d4:	00800074 	movhi	r2,1
    98d8:	10a95204 	addi	r2,r2,-23224
    98dc:	10800017 	ldw	r2,0(r2)
    98e0:	1007883a 	mov	r3,r2
    98e4:	e0bffd17 	ldw	r2,-12(fp)
    98e8:	18bfd72e 	bgeu	r3,r2,9848 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    98ec:	e03fff15 	stw	zero,-4(fp)
    98f0:	e0bfff17 	ldw	r2,-4(fp)
}
    98f4:	e037883a 	mov	sp,fp
    98f8:	dfc00217 	ldw	ra,8(sp)
    98fc:	df000117 	ldw	fp,4(sp)
    9900:	dc000017 	ldw	r16,0(sp)
    9904:	dec00304 	addi	sp,sp,12
    9908:	f800283a 	ret

0000990c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    990c:	defff404 	addi	sp,sp,-48
    9910:	dfc00b15 	stw	ra,44(sp)
    9914:	df000a15 	stw	fp,40(sp)
    9918:	df000a04 	addi	fp,sp,40
    991c:	e13ffb15 	stw	r4,-20(fp)
    9920:	e17ffc15 	stw	r5,-16(fp)
    9924:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9928:	00bfffc4 	movi	r2,-1
    992c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    9930:	00bffb44 	movi	r2,-19
    9934:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    9938:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    993c:	e13ffb17 	ldw	r4,-20(fp)
    9940:	01400074 	movhi	r5,1
    9944:	29695004 	addi	r5,r5,-23232
    9948:	0009b900 	call	9b90 <alt_find_dev>
    994c:	e0bffa15 	stw	r2,-24(fp)
    9950:	e0bffa17 	ldw	r2,-24(fp)
    9954:	1004c03a 	cmpne	r2,r2,zero
    9958:	1000051e 	bne	r2,zero,9970 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    995c:	e13ffb17 	ldw	r4,-20(fp)
    9960:	0009c240 	call	9c24 <alt_find_file>
    9964:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    9968:	00800044 	movi	r2,1
    996c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9970:	e0bffa17 	ldw	r2,-24(fp)
    9974:	1005003a 	cmpeq	r2,r2,zero
    9978:	1000311e 	bne	r2,zero,9a40 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    997c:	e13ffa17 	ldw	r4,-24(fp)
    9980:	0009d440 	call	9d44 <alt_get_fd>
    9984:	e0bff815 	stw	r2,-32(fp)
    9988:	e0bff817 	ldw	r2,-32(fp)
    998c:	1004403a 	cmpge	r2,r2,zero
    9990:	1000031e 	bne	r2,zero,99a0 <open+0x94>
    {
      status = index;
    9994:	e0bff817 	ldw	r2,-32(fp)
    9998:	e0bff715 	stw	r2,-36(fp)
    999c:	00002a06 	br	9a48 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    99a0:	e13ff817 	ldw	r4,-32(fp)
    99a4:	01400304 	movi	r5,12
    99a8:	0008d1c0 	call	8d1c <__mulsi3>
    99ac:	1007883a 	mov	r3,r2
    99b0:	00800074 	movhi	r2,1
    99b4:	10a8ec04 	addi	r2,r2,-23632
    99b8:	1885883a 	add	r2,r3,r2
    99bc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    99c0:	e0fffc17 	ldw	r3,-16(fp)
    99c4:	00900034 	movhi	r2,16384
    99c8:	10bfffc4 	addi	r2,r2,-1
    99cc:	1886703a 	and	r3,r3,r2
    99d0:	e0bff917 	ldw	r2,-28(fp)
    99d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    99d8:	e0bff617 	ldw	r2,-40(fp)
    99dc:	1004c03a 	cmpne	r2,r2,zero
    99e0:	1000061e 	bne	r2,zero,99fc <open+0xf0>
    99e4:	e13ff917 	ldw	r4,-28(fp)
    99e8:	00098140 	call	9814 <alt_file_locked>
    99ec:	e0bff715 	stw	r2,-36(fp)
    99f0:	e0bff717 	ldw	r2,-36(fp)
    99f4:	1004803a 	cmplt	r2,r2,zero
    99f8:	1000131e 	bne	r2,zero,9a48 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    99fc:	e0bffa17 	ldw	r2,-24(fp)
    9a00:	10800317 	ldw	r2,12(r2)
    9a04:	1005003a 	cmpeq	r2,r2,zero
    9a08:	1000091e 	bne	r2,zero,9a30 <open+0x124>
    9a0c:	e0bffa17 	ldw	r2,-24(fp)
    9a10:	10800317 	ldw	r2,12(r2)
    9a14:	e13ff917 	ldw	r4,-28(fp)
    9a18:	e17ffb17 	ldw	r5,-20(fp)
    9a1c:	e1bffc17 	ldw	r6,-16(fp)
    9a20:	e1fffd17 	ldw	r7,-12(fp)
    9a24:	103ee83a 	callr	r2
    9a28:	e0bfff15 	stw	r2,-4(fp)
    9a2c:	00000106 	br	9a34 <open+0x128>
    9a30:	e03fff15 	stw	zero,-4(fp)
    9a34:	e0bfff17 	ldw	r2,-4(fp)
    9a38:	e0bff715 	stw	r2,-36(fp)
    9a3c:	00000206 	br	9a48 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9a40:	00bffb44 	movi	r2,-19
    9a44:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9a48:	e0bff717 	ldw	r2,-36(fp)
    9a4c:	1004403a 	cmpge	r2,r2,zero
    9a50:	1000091e 	bne	r2,zero,9a78 <open+0x16c>
  {
    alt_release_fd (index);  
    9a54:	e13ff817 	ldw	r4,-32(fp)
    9a58:	0009af80 	call	9af8 <alt_release_fd>
    ALT_ERRNO = -status;
    9a5c:	0009a980 	call	9a98 <alt_get_errno>
    9a60:	e0fff717 	ldw	r3,-36(fp)
    9a64:	00c7c83a 	sub	r3,zero,r3
    9a68:	10c00015 	stw	r3,0(r2)
    return -1;
    9a6c:	00bfffc4 	movi	r2,-1
    9a70:	e0bffe15 	stw	r2,-8(fp)
    9a74:	00000206 	br	9a80 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    9a78:	e0bff817 	ldw	r2,-32(fp)
    9a7c:	e0bffe15 	stw	r2,-8(fp)
    9a80:	e0bffe17 	ldw	r2,-8(fp)
}
    9a84:	e037883a 	mov	sp,fp
    9a88:	dfc00117 	ldw	ra,4(sp)
    9a8c:	df000017 	ldw	fp,0(sp)
    9a90:	dec00204 	addi	sp,sp,8
    9a94:	f800283a 	ret

00009a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9a98:	defffd04 	addi	sp,sp,-12
    9a9c:	dfc00215 	stw	ra,8(sp)
    9aa0:	df000115 	stw	fp,4(sp)
    9aa4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9aa8:	00800074 	movhi	r2,1
    9aac:	10a95304 	addi	r2,r2,-23220
    9ab0:	10800017 	ldw	r2,0(r2)
    9ab4:	1005003a 	cmpeq	r2,r2,zero
    9ab8:	1000061e 	bne	r2,zero,9ad4 <alt_get_errno+0x3c>
    9abc:	00800074 	movhi	r2,1
    9ac0:	10a95304 	addi	r2,r2,-23220
    9ac4:	10800017 	ldw	r2,0(r2)
    9ac8:	103ee83a 	callr	r2
    9acc:	e0bfff15 	stw	r2,-4(fp)
    9ad0:	00000306 	br	9ae0 <alt_get_errno+0x48>
    9ad4:	00800074 	movhi	r2,1
    9ad8:	10aa0904 	addi	r2,r2,-22492
    9adc:	e0bfff15 	stw	r2,-4(fp)
    9ae0:	e0bfff17 	ldw	r2,-4(fp)
}
    9ae4:	e037883a 	mov	sp,fp
    9ae8:	dfc00117 	ldw	ra,4(sp)
    9aec:	df000017 	ldw	fp,0(sp)
    9af0:	dec00204 	addi	sp,sp,8
    9af4:	f800283a 	ret

00009af8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9af8:	defffc04 	addi	sp,sp,-16
    9afc:	dfc00315 	stw	ra,12(sp)
    9b00:	df000215 	stw	fp,8(sp)
    9b04:	dc000115 	stw	r16,4(sp)
    9b08:	df000104 	addi	fp,sp,4
    9b0c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9b10:	e0bfff17 	ldw	r2,-4(fp)
    9b14:	108000d0 	cmplti	r2,r2,3
    9b18:	10000f1e 	bne	r2,zero,9b58 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    9b1c:	e13fff17 	ldw	r4,-4(fp)
    9b20:	04000074 	movhi	r16,1
    9b24:	8428ec04 	addi	r16,r16,-23632
    9b28:	01400304 	movi	r5,12
    9b2c:	0008d1c0 	call	8d1c <__mulsi3>
    9b30:	1405883a 	add	r2,r2,r16
    9b34:	10800204 	addi	r2,r2,8
    9b38:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    9b3c:	e13fff17 	ldw	r4,-4(fp)
    9b40:	04000074 	movhi	r16,1
    9b44:	8428ec04 	addi	r16,r16,-23632
    9b48:	01400304 	movi	r5,12
    9b4c:	0008d1c0 	call	8d1c <__mulsi3>
    9b50:	1405883a 	add	r2,r2,r16
    9b54:	10000015 	stw	zero,0(r2)
  }
}
    9b58:	e037883a 	mov	sp,fp
    9b5c:	dfc00217 	ldw	ra,8(sp)
    9b60:	df000117 	ldw	fp,4(sp)
    9b64:	dc000017 	ldw	r16,0(sp)
    9b68:	dec00304 	addi	sp,sp,12
    9b6c:	f800283a 	ret

00009b70 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    9b70:	deffff04 	addi	sp,sp,-4
    9b74:	df000015 	stw	fp,0(sp)
    9b78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9b7c:	000170fa 	wrctl	ienable,zero
}
    9b80:	e037883a 	mov	sp,fp
    9b84:	df000017 	ldw	fp,0(sp)
    9b88:	dec00104 	addi	sp,sp,4
    9b8c:	f800283a 	ret

00009b90 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9b90:	defff904 	addi	sp,sp,-28
    9b94:	dfc00615 	stw	ra,24(sp)
    9b98:	df000515 	stw	fp,20(sp)
    9b9c:	df000504 	addi	fp,sp,20
    9ba0:	e13ffd15 	stw	r4,-12(fp)
    9ba4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9ba8:	e0bffe17 	ldw	r2,-8(fp)
    9bac:	10800017 	ldw	r2,0(r2)
    9bb0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9bb4:	e13ffd17 	ldw	r4,-12(fp)
    9bb8:	000833c0 	call	833c <strlen>
    9bbc:	10800044 	addi	r2,r2,1
    9bc0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9bc4:	00000d06 	br	9bfc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9bc8:	e0bffc17 	ldw	r2,-16(fp)
    9bcc:	11000217 	ldw	r4,8(r2)
    9bd0:	e1bffb17 	ldw	r6,-20(fp)
    9bd4:	e17ffd17 	ldw	r5,-12(fp)
    9bd8:	0009e480 	call	9e48 <memcmp>
    9bdc:	1004c03a 	cmpne	r2,r2,zero
    9be0:	1000031e 	bne	r2,zero,9bf0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9be4:	e0bffc17 	ldw	r2,-16(fp)
    9be8:	e0bfff15 	stw	r2,-4(fp)
    9bec:	00000706 	br	9c0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9bf0:	e0bffc17 	ldw	r2,-16(fp)
    9bf4:	10800017 	ldw	r2,0(r2)
    9bf8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9bfc:	e0fffe17 	ldw	r3,-8(fp)
    9c00:	e0bffc17 	ldw	r2,-16(fp)
    9c04:	10fff01e 	bne	r2,r3,9bc8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9c08:	e03fff15 	stw	zero,-4(fp)
    9c0c:	e0bfff17 	ldw	r2,-4(fp)
}
    9c10:	e037883a 	mov	sp,fp
    9c14:	dfc00117 	ldw	ra,4(sp)
    9c18:	df000017 	ldw	fp,0(sp)
    9c1c:	dec00204 	addi	sp,sp,8
    9c20:	f800283a 	ret

00009c24 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9c24:	defffa04 	addi	sp,sp,-24
    9c28:	dfc00515 	stw	ra,20(sp)
    9c2c:	df000415 	stw	fp,16(sp)
    9c30:	df000404 	addi	fp,sp,16
    9c34:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9c38:	00800074 	movhi	r2,1
    9c3c:	10a94e04 	addi	r2,r2,-23240
    9c40:	10800017 	ldw	r2,0(r2)
    9c44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9c48:	00003306 	br	9d18 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    9c4c:	e0bffd17 	ldw	r2,-12(fp)
    9c50:	11000217 	ldw	r4,8(r2)
    9c54:	000833c0 	call	833c <strlen>
    9c58:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    9c5c:	e0bffd17 	ldw	r2,-12(fp)
    9c60:	10c00217 	ldw	r3,8(r2)
    9c64:	e0bffc17 	ldw	r2,-16(fp)
    9c68:	1885883a 	add	r2,r3,r2
    9c6c:	10bfffc4 	addi	r2,r2,-1
    9c70:	10800003 	ldbu	r2,0(r2)
    9c74:	10803fcc 	andi	r2,r2,255
    9c78:	1080201c 	xori	r2,r2,128
    9c7c:	10bfe004 	addi	r2,r2,-128
    9c80:	10800bd8 	cmpnei	r2,r2,47
    9c84:	1000031e 	bne	r2,zero,9c94 <alt_find_file+0x70>
    {
      len -= 1;
    9c88:	e0bffc17 	ldw	r2,-16(fp)
    9c8c:	10bfffc4 	addi	r2,r2,-1
    9c90:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9c94:	e0bffc17 	ldw	r2,-16(fp)
    9c98:	1007883a 	mov	r3,r2
    9c9c:	e0bffe17 	ldw	r2,-8(fp)
    9ca0:	1885883a 	add	r2,r3,r2
    9ca4:	10800003 	ldbu	r2,0(r2)
    9ca8:	10803fcc 	andi	r2,r2,255
    9cac:	1080201c 	xori	r2,r2,128
    9cb0:	10bfe004 	addi	r2,r2,-128
    9cb4:	10800be0 	cmpeqi	r2,r2,47
    9cb8:	10000a1e 	bne	r2,zero,9ce4 <alt_find_file+0xc0>
    9cbc:	e0bffc17 	ldw	r2,-16(fp)
    9cc0:	1007883a 	mov	r3,r2
    9cc4:	e0bffe17 	ldw	r2,-8(fp)
    9cc8:	1885883a 	add	r2,r3,r2
    9ccc:	10800003 	ldbu	r2,0(r2)
    9cd0:	10803fcc 	andi	r2,r2,255
    9cd4:	1080201c 	xori	r2,r2,128
    9cd8:	10bfe004 	addi	r2,r2,-128
    9cdc:	1004c03a 	cmpne	r2,r2,zero
    9ce0:	10000a1e 	bne	r2,zero,9d0c <alt_find_file+0xe8>
    9ce4:	e0bffd17 	ldw	r2,-12(fp)
    9ce8:	11000217 	ldw	r4,8(r2)
    9cec:	e1bffc17 	ldw	r6,-16(fp)
    9cf0:	e17ffe17 	ldw	r5,-8(fp)
    9cf4:	0009e480 	call	9e48 <memcmp>
    9cf8:	1004c03a 	cmpne	r2,r2,zero
    9cfc:	1000031e 	bne	r2,zero,9d0c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9d00:	e0bffd17 	ldw	r2,-12(fp)
    9d04:	e0bfff15 	stw	r2,-4(fp)
    9d08:	00000806 	br	9d2c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    9d0c:	e0bffd17 	ldw	r2,-12(fp)
    9d10:	10800017 	ldw	r2,0(r2)
    9d14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9d18:	00c00074 	movhi	r3,1
    9d1c:	18e94e04 	addi	r3,r3,-23240
    9d20:	e0bffd17 	ldw	r2,-12(fp)
    9d24:	10ffc91e 	bne	r2,r3,9c4c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9d28:	e03fff15 	stw	zero,-4(fp)
    9d2c:	e0bfff17 	ldw	r2,-4(fp)
}
    9d30:	e037883a 	mov	sp,fp
    9d34:	dfc00117 	ldw	ra,4(sp)
    9d38:	df000017 	ldw	fp,0(sp)
    9d3c:	dec00204 	addi	sp,sp,8
    9d40:	f800283a 	ret

00009d44 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9d44:	defffa04 	addi	sp,sp,-24
    9d48:	dfc00515 	stw	ra,20(sp)
    9d4c:	df000415 	stw	fp,16(sp)
    9d50:	dc000315 	stw	r16,12(sp)
    9d54:	df000304 	addi	fp,sp,12
    9d58:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9d5c:	00bffa04 	movi	r2,-24
    9d60:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9d64:	e03ffe15 	stw	zero,-8(fp)
    9d68:	00002006 	br	9dec <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    9d6c:	e13ffe17 	ldw	r4,-8(fp)
    9d70:	04000074 	movhi	r16,1
    9d74:	8428ec04 	addi	r16,r16,-23632
    9d78:	01400304 	movi	r5,12
    9d7c:	0008d1c0 	call	8d1c <__mulsi3>
    9d80:	1405883a 	add	r2,r2,r16
    9d84:	10800017 	ldw	r2,0(r2)
    9d88:	1004c03a 	cmpne	r2,r2,zero
    9d8c:	1000141e 	bne	r2,zero,9de0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    9d90:	e13ffe17 	ldw	r4,-8(fp)
    9d94:	04000074 	movhi	r16,1
    9d98:	8428ec04 	addi	r16,r16,-23632
    9d9c:	01400304 	movi	r5,12
    9da0:	0008d1c0 	call	8d1c <__mulsi3>
    9da4:	1407883a 	add	r3,r2,r16
    9da8:	e0bfff17 	ldw	r2,-4(fp)
    9dac:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    9db0:	00800074 	movhi	r2,1
    9db4:	10a95204 	addi	r2,r2,-23224
    9db8:	10c00017 	ldw	r3,0(r2)
    9dbc:	e0bffe17 	ldw	r2,-8(fp)
    9dc0:	1880040e 	bge	r3,r2,9dd4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    9dc4:	00c00074 	movhi	r3,1
    9dc8:	18e95204 	addi	r3,r3,-23224
    9dcc:	e0bffe17 	ldw	r2,-8(fp)
    9dd0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    9dd4:	e0bffe17 	ldw	r2,-8(fp)
    9dd8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    9ddc:	00000606 	br	9df8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9de0:	e0bffe17 	ldw	r2,-8(fp)
    9de4:	10800044 	addi	r2,r2,1
    9de8:	e0bffe15 	stw	r2,-8(fp)
    9dec:	e0bffe17 	ldw	r2,-8(fp)
    9df0:	10800810 	cmplti	r2,r2,32
    9df4:	103fdd1e 	bne	r2,zero,9d6c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9df8:	e0bffd17 	ldw	r2,-12(fp)
}
    9dfc:	e037883a 	mov	sp,fp
    9e00:	dfc00217 	ldw	ra,8(sp)
    9e04:	df000117 	ldw	fp,4(sp)
    9e08:	dc000017 	ldw	r16,0(sp)
    9e0c:	dec00304 	addi	sp,sp,12
    9e10:	f800283a 	ret

00009e14 <atexit>:
    9e14:	200b883a 	mov	r5,r4
    9e18:	000d883a 	mov	r6,zero
    9e1c:	0009883a 	mov	r4,zero
    9e20:	000f883a 	mov	r7,zero
    9e24:	0009e841 	jmpi	9e84 <__register_exitproc>

00009e28 <exit>:
    9e28:	defffe04 	addi	sp,sp,-8
    9e2c:	dc400015 	stw	r17,0(sp)
    9e30:	000b883a 	mov	r5,zero
    9e34:	2023883a 	mov	r17,r4
    9e38:	dfc00115 	stw	ra,4(sp)
    9e3c:	0009ff40 	call	9ff4 <__call_exitprocs>
    9e40:	8809883a 	mov	r4,r17
    9e44:	000a1f00 	call	a1f0 <_exit>

00009e48 <memcmp>:
    9e48:	31ffffc4 	addi	r7,r6,-1
    9e4c:	3000061e 	bne	r6,zero,9e68 <memcmp+0x20>
    9e50:	00000a06 	br	9e7c <memcmp+0x34>
    9e54:	39ffffc4 	addi	r7,r7,-1
    9e58:	00bfffc4 	movi	r2,-1
    9e5c:	21000044 	addi	r4,r4,1
    9e60:	29400044 	addi	r5,r5,1
    9e64:	38800526 	beq	r7,r2,9e7c <memcmp+0x34>
    9e68:	20c00003 	ldbu	r3,0(r4)
    9e6c:	28800003 	ldbu	r2,0(r5)
    9e70:	18bff826 	beq	r3,r2,9e54 <memcmp+0xc>
    9e74:	1885c83a 	sub	r2,r3,r2
    9e78:	f800283a 	ret
    9e7c:	0005883a 	mov	r2,zero
    9e80:	f800283a 	ret

00009e84 <__register_exitproc>:
    9e84:	defff904 	addi	sp,sp,-28
    9e88:	00800074 	movhi	r2,1
    9e8c:	10a94d04 	addi	r2,r2,-23244
    9e90:	dc400115 	stw	r17,4(sp)
    9e94:	14400017 	ldw	r17,0(r2)
    9e98:	dc000015 	stw	r16,0(sp)
    9e9c:	dd400515 	stw	r21,20(sp)
    9ea0:	8c000c17 	ldw	r16,48(r17)
    9ea4:	dd000415 	stw	r20,16(sp)
    9ea8:	dcc00315 	stw	r19,12(sp)
    9eac:	dc800215 	stw	r18,8(sp)
    9eb0:	dfc00615 	stw	ra,24(sp)
    9eb4:	2025883a 	mov	r18,r4
    9eb8:	282b883a 	mov	r21,r5
    9ebc:	3029883a 	mov	r20,r6
    9ec0:	3827883a 	mov	r19,r7
    9ec4:	80002626 	beq	r16,zero,9f60 <__register_exitproc+0xdc>
    9ec8:	81400117 	ldw	r5,4(r16)
    9ecc:	008007c4 	movi	r2,31
    9ed0:	11403716 	blt	r2,r5,9fb0 <__register_exitproc+0x12c>
    9ed4:	90002026 	beq	r18,zero,9f58 <__register_exitproc+0xd4>
    9ed8:	81802217 	ldw	r6,136(r16)
    9edc:	30002926 	beq	r6,zero,9f84 <__register_exitproc+0x100>
    9ee0:	81400117 	ldw	r5,4(r16)
    9ee4:	00c00044 	movi	r3,1
    9ee8:	31004017 	ldw	r4,256(r6)
    9eec:	1946983a 	sll	r3,r3,r5
    9ef0:	2945883a 	add	r2,r5,r5
    9ef4:	1085883a 	add	r2,r2,r2
    9ef8:	1185883a 	add	r2,r2,r6
    9efc:	20c8b03a 	or	r4,r4,r3
    9f00:	14c02015 	stw	r19,128(r2)
    9f04:	15000015 	stw	r20,0(r2)
    9f08:	00800084 	movi	r2,2
    9f0c:	31004015 	stw	r4,256(r6)
    9f10:	90801826 	beq	r18,r2,9f74 <__register_exitproc+0xf0>
    9f14:	2945883a 	add	r2,r5,r5
    9f18:	1085883a 	add	r2,r2,r2
    9f1c:	1405883a 	add	r2,r2,r16
    9f20:	28c00044 	addi	r3,r5,1
    9f24:	0009883a 	mov	r4,zero
    9f28:	15400215 	stw	r21,8(r2)
    9f2c:	80c00115 	stw	r3,4(r16)
    9f30:	2005883a 	mov	r2,r4
    9f34:	dfc00617 	ldw	ra,24(sp)
    9f38:	dd400517 	ldw	r21,20(sp)
    9f3c:	dd000417 	ldw	r20,16(sp)
    9f40:	dcc00317 	ldw	r19,12(sp)
    9f44:	dc800217 	ldw	r18,8(sp)
    9f48:	dc400117 	ldw	r17,4(sp)
    9f4c:	dc000017 	ldw	r16,0(sp)
    9f50:	dec00704 	addi	sp,sp,28
    9f54:	f800283a 	ret
    9f58:	81400117 	ldw	r5,4(r16)
    9f5c:	003fed06 	br	9f14 <__register_exitproc+0x90>
    9f60:	00800074 	movhi	r2,1
    9f64:	10aa0d04 	addi	r2,r2,-22476
    9f68:	1021883a 	mov	r16,r2
    9f6c:	88800c15 	stw	r2,48(r17)
    9f70:	003fd506 	br	9ec8 <__register_exitproc+0x44>
    9f74:	30804117 	ldw	r2,260(r6)
    9f78:	10c4b03a 	or	r2,r2,r3
    9f7c:	30804115 	stw	r2,260(r6)
    9f80:	003fe406 	br	9f14 <__register_exitproc+0x90>
    9f84:	00800034 	movhi	r2,0
    9f88:	10800004 	addi	r2,r2,0
    9f8c:	10000b26 	beq	r2,zero,9fbc <__register_exitproc+0x138>
    9f90:	01004204 	movi	r4,264
    9f94:	103ee83a 	callr	r2
    9f98:	10000826 	beq	r2,zero,9fbc <__register_exitproc+0x138>
    9f9c:	100d883a 	mov	r6,r2
    9fa0:	10004015 	stw	zero,256(r2)
    9fa4:	10004115 	stw	zero,260(r2)
    9fa8:	80802215 	stw	r2,136(r16)
    9fac:	003fcc06 	br	9ee0 <__register_exitproc+0x5c>
    9fb0:	00800034 	movhi	r2,0
    9fb4:	10800004 	addi	r2,r2,0
    9fb8:	1000021e 	bne	r2,zero,9fc4 <__register_exitproc+0x140>
    9fbc:	013fffc4 	movi	r4,-1
    9fc0:	003fdb06 	br	9f30 <__register_exitproc+0xac>
    9fc4:	01002304 	movi	r4,140
    9fc8:	103ee83a 	callr	r2
    9fcc:	1007883a 	mov	r3,r2
    9fd0:	103ffa26 	beq	r2,zero,9fbc <__register_exitproc+0x138>
    9fd4:	88800c17 	ldw	r2,48(r17)
    9fd8:	1821883a 	mov	r16,r3
    9fdc:	18000115 	stw	zero,4(r3)
    9fe0:	18800015 	stw	r2,0(r3)
    9fe4:	88c00c15 	stw	r3,48(r17)
    9fe8:	903fdb26 	beq	r18,zero,9f58 <__register_exitproc+0xd4>
    9fec:	003fba06 	br	9ed8 <__register_exitproc+0x54>

00009ff0 <register_fini>:
    9ff0:	f800283a 	ret

00009ff4 <__call_exitprocs>:
    9ff4:	defff304 	addi	sp,sp,-52
    9ff8:	00800074 	movhi	r2,1
    9ffc:	10a94d04 	addi	r2,r2,-23244
    a000:	df000b15 	stw	fp,44(sp)
    a004:	17000017 	ldw	fp,0(r2)
    a008:	00800034 	movhi	r2,0
    a00c:	10800004 	addi	r2,r2,0
    a010:	1005003a 	cmpeq	r2,r2,zero
    a014:	d8800215 	stw	r2,8(sp)
    a018:	e0800c04 	addi	r2,fp,48
    a01c:	dd800915 	stw	r22,36(sp)
    a020:	dd400815 	stw	r21,32(sp)
    a024:	dfc00c15 	stw	ra,48(sp)
    a028:	ddc00a15 	stw	r23,40(sp)
    a02c:	dd000715 	stw	r20,28(sp)
    a030:	dcc00615 	stw	r19,24(sp)
    a034:	dc800515 	stw	r18,20(sp)
    a038:	dc400415 	stw	r17,16(sp)
    a03c:	dc000315 	stw	r16,12(sp)
    a040:	282d883a 	mov	r22,r5
    a044:	d9000115 	stw	r4,4(sp)
    a048:	d8800015 	stw	r2,0(sp)
    a04c:	282b003a 	cmpeq	r21,r5,zero
    a050:	e4400c17 	ldw	r17,48(fp)
    a054:	88001226 	beq	r17,zero,a0a0 <__call_exitprocs+0xac>
    a058:	ddc00017 	ldw	r23,0(sp)
    a05c:	88800117 	ldw	r2,4(r17)
    a060:	8c802217 	ldw	r18,136(r17)
    a064:	143fffc4 	addi	r16,r2,-1
    a068:	80000b16 	blt	r16,zero,a098 <__call_exitprocs+0xa4>
    a06c:	9027003a 	cmpeq	r19,r18,zero
    a070:	a800171e 	bne	r21,zero,a0d0 <__call_exitprocs+0xdc>
    a074:	9800051e 	bne	r19,zero,a08c <__call_exitprocs+0x98>
    a078:	8409883a 	add	r4,r16,r16
    a07c:	2105883a 	add	r2,r4,r4
    a080:	1485883a 	add	r2,r2,r18
    a084:	10c02017 	ldw	r3,128(r2)
    a088:	b0c01226 	beq	r22,r3,a0d4 <__call_exitprocs+0xe0>
    a08c:	843fffc4 	addi	r16,r16,-1
    a090:	00bfffc4 	movi	r2,-1
    a094:	80bff61e 	bne	r16,r2,a070 <__call_exitprocs+0x7c>
    a098:	d8800217 	ldw	r2,8(sp)
    a09c:	10003226 	beq	r2,zero,a168 <__call_exitprocs+0x174>
    a0a0:	dfc00c17 	ldw	ra,48(sp)
    a0a4:	df000b17 	ldw	fp,44(sp)
    a0a8:	ddc00a17 	ldw	r23,40(sp)
    a0ac:	dd800917 	ldw	r22,36(sp)
    a0b0:	dd400817 	ldw	r21,32(sp)
    a0b4:	dd000717 	ldw	r20,28(sp)
    a0b8:	dcc00617 	ldw	r19,24(sp)
    a0bc:	dc800517 	ldw	r18,20(sp)
    a0c0:	dc400417 	ldw	r17,16(sp)
    a0c4:	dc000317 	ldw	r16,12(sp)
    a0c8:	dec00d04 	addi	sp,sp,52
    a0cc:	f800283a 	ret
    a0d0:	8409883a 	add	r4,r16,r16
    a0d4:	88c00117 	ldw	r3,4(r17)
    a0d8:	2105883a 	add	r2,r4,r4
    a0dc:	1445883a 	add	r2,r2,r17
    a0e0:	18ffffc4 	addi	r3,r3,-1
    a0e4:	11800217 	ldw	r6,8(r2)
    a0e8:	1c001826 	beq	r3,r16,a14c <__call_exitprocs+0x158>
    a0ec:	10000215 	stw	zero,8(r2)
    a0f0:	303fe626 	beq	r6,zero,a08c <__call_exitprocs+0x98>
    a0f4:	8d000117 	ldw	r20,4(r17)
    a0f8:	9800121e 	bne	r19,zero,a144 <__call_exitprocs+0x150>
    a0fc:	00c00044 	movi	r3,1
    a100:	1c06983a 	sll	r3,r3,r16
    a104:	90804017 	ldw	r2,256(r18)
    a108:	1884703a 	and	r2,r3,r2
    a10c:	10000d26 	beq	r2,zero,a144 <__call_exitprocs+0x150>
    a110:	90804117 	ldw	r2,260(r18)
    a114:	1884703a 	and	r2,r3,r2
    a118:	10000e1e 	bne	r2,zero,a154 <__call_exitprocs+0x160>
    a11c:	2105883a 	add	r2,r4,r4
    a120:	1485883a 	add	r2,r2,r18
    a124:	11400017 	ldw	r5,0(r2)
    a128:	d9000117 	ldw	r4,4(sp)
    a12c:	303ee83a 	callr	r6
    a130:	88800117 	ldw	r2,4(r17)
    a134:	a0bfc61e 	bne	r20,r2,a050 <__call_exitprocs+0x5c>
    a138:	b8800017 	ldw	r2,0(r23)
    a13c:	147fd326 	beq	r2,r17,a08c <__call_exitprocs+0x98>
    a140:	003fc306 	br	a050 <__call_exitprocs+0x5c>
    a144:	303ee83a 	callr	r6
    a148:	003ff906 	br	a130 <__call_exitprocs+0x13c>
    a14c:	8c000115 	stw	r16,4(r17)
    a150:	003fe706 	br	a0f0 <__call_exitprocs+0xfc>
    a154:	2105883a 	add	r2,r4,r4
    a158:	1485883a 	add	r2,r2,r18
    a15c:	11000017 	ldw	r4,0(r2)
    a160:	303ee83a 	callr	r6
    a164:	003ff206 	br	a130 <__call_exitprocs+0x13c>
    a168:	88800117 	ldw	r2,4(r17)
    a16c:	10000b1e 	bne	r2,zero,a19c <__call_exitprocs+0x1a8>
    a170:	89000017 	ldw	r4,0(r17)
    a174:	20000a26 	beq	r4,zero,a1a0 <__call_exitprocs+0x1ac>
    a178:	b9000015 	stw	r4,0(r23)
    a17c:	90000226 	beq	r18,zero,a188 <__call_exitprocs+0x194>
    a180:	9009883a 	mov	r4,r18
    a184:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a188:	8809883a 	mov	r4,r17
    a18c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a190:	bc400017 	ldw	r17,0(r23)
    a194:	883fb11e 	bne	r17,zero,a05c <__call_exitprocs+0x68>
    a198:	003fc106 	br	a0a0 <__call_exitprocs+0xac>
    a19c:	89000017 	ldw	r4,0(r17)
    a1a0:	882f883a 	mov	r23,r17
    a1a4:	2023883a 	mov	r17,r4
    a1a8:	883fac1e 	bne	r17,zero,a05c <__call_exitprocs+0x68>
    a1ac:	003fbc06 	br	a0a0 <__call_exitprocs+0xac>

0000a1b0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    a1b0:	defffd04 	addi	sp,sp,-12
    a1b4:	df000215 	stw	fp,8(sp)
    a1b8:	df000204 	addi	fp,sp,8
    a1bc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    a1c0:	e0bfff17 	ldw	r2,-4(fp)
    a1c4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a1c8:	e0bffe17 	ldw	r2,-8(fp)
    a1cc:	1005003a 	cmpeq	r2,r2,zero
    a1d0:	1000021e 	bne	r2,zero,a1dc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    a1d4:	002af070 	cmpltui	zero,zero,43969
    a1d8:	00000106 	br	a1e0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    a1dc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    a1e0:	e037883a 	mov	sp,fp
    a1e4:	df000017 	ldw	fp,0(sp)
    a1e8:	dec00104 	addi	sp,sp,4
    a1ec:	f800283a 	ret

0000a1f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a1f0:	defffd04 	addi	sp,sp,-12
    a1f4:	dfc00215 	stw	ra,8(sp)
    a1f8:	df000115 	stw	fp,4(sp)
    a1fc:	df000104 	addi	fp,sp,4
    a200:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    a204:	e13fff17 	ldw	r4,-4(fp)
    a208:	000a1b00 	call	a1b0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a20c:	003fff06 	br	a20c <_exit+0x1c>
    a210:	00009ff0 	cmpltui	zero,zero,639
